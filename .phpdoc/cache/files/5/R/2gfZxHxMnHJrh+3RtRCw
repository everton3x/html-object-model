1615849915
waR3U4bTeM%3A8a911675b70c5c9b44750634019c3be7-0f42b9750a9e101b7110036bf08603c7
s:85428:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6NTc6IkVuc3VyZXMgdGhhdCBhcnJheXMgY29uZm9ybSB0byB0aGUgYXJyYXkgY29kaW5nIHN0YW5kYXJkLiI7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czowOiIiO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAdGFncyI7YTozOntpOjA7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcQXV0aG9yIjo0OntzOjc6IgAqAG5hbWUiO3M6NjoiYXV0aG9yIjtzOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcQXV0aG9yAGF1dGhvck5hbWUiO3M6MTM6IkdyZWcgU2hlcndvb2QiO3M6NTg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xBdXRob3IAYXV0aG9yRW1haWwiO3M6MTk6ImdzaGVyd29vZEBzcXVpei5uZXQiO3M6MTQ6IgAqAGRlc2NyaXB0aW9uIjtOO31pOjE7Tzo0NjoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcR2VuZXJpYyI6Mjp7czo3OiIAKgBuYW1lIjtzOjk6ImNvcHlyaWdodCI7czoxNDoiACoAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6NDQ6IjIwMDYtMjAxNSBTcXVpeiBQdHkgTHRkIChBQk4gNzcgMDg0IDY3MCA2MDApIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX19aToyO086NDY6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXEdlbmVyaWMiOjI6e3M6NzoiACoAbmFtZSI7czo3OiJsaWNlbnNlIjtzOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czo4MDoiaHR0cHM6Ly9naXRodWIuY29tL3NxdWl6bGFicy9QSFBfQ29kZVNuaWZmZXIvYmxvYi9tYXN0ZXIvbGljZW5jZS50eHQgQlNEIExpY2VuY2UiO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fX19czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBjb250ZXh0IjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dCI6Mjp7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZSI7czowOiIiO3M6NTY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dABuYW1lc3BhY2VBbGlhc2VzIjthOjA6e319czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjBmNDJiOTc1MGE5ZTEwMWI3MTEwMDM2YmYwODYwM2M3IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MjU6IkFycmF5RGVjbGFyYXRpb25TbmlmZi5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czo5MjoidmVuZG9yL3NxdWl6bGFicy9waHBfY29kZXNuaWZmZXIvc3JjL1N0YW5kYXJkcy9TcXVpei9TbmlmZnMvQXJyYXlzL0FycmF5RGVjbGFyYXRpb25TbmlmZi5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjM4NTQwOiI8P3BocAovKioKICogRW5zdXJlcyB0aGF0IGFycmF5cyBjb25mb3JtIHRvIHRoZSBhcnJheSBjb2Rpbmcgc3RhbmRhcmQuCiAqCiAqIEBhdXRob3IgICAgR3JlZyBTaGVyd29vZCA8Z3NoZXJ3b29kQHNxdWl6Lm5ldD4KICogQGNvcHlyaWdodCAyMDA2LTIwMTUgU3F1aXogUHR5IEx0ZCAoQUJOIDc3IDA4NCA2NzAgNjAwKQogKiBAbGljZW5zZSAgIGh0dHBzOi8vZ2l0aHViLmNvbS9zcXVpemxhYnMvUEhQX0NvZGVTbmlmZmVyL2Jsb2IvbWFzdGVyL2xpY2VuY2UudHh0IEJTRCBMaWNlbmNlCiAqLwoKbmFtZXNwYWNlIFBIUF9Db2RlU25pZmZlclxTdGFuZGFyZHNcU3F1aXpcU25pZmZzXEFycmF5czsKCnVzZSBQSFBfQ29kZVNuaWZmZXJcRmlsZXNcRmlsZTsKdXNlIFBIUF9Db2RlU25pZmZlclxTbmlmZnNcU25pZmY7CnVzZSBQSFBfQ29kZVNuaWZmZXJcVXRpbFxUb2tlbnM7CgpjbGFzcyBBcnJheURlY2xhcmF0aW9uU25pZmYgaW1wbGVtZW50cyBTbmlmZgp7CgoKICAgIC8qKgogICAgICogUmV0dXJucyBhbiBhcnJheSBvZiB0b2tlbnMgdGhpcyB0ZXN0IHdhbnRzIHRvIGxpc3RlbiBmb3IuCiAgICAgKgogICAgICogQHJldHVybiBhcnJheQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gcmVnaXN0ZXIoKQogICAgewogICAgICAgIHJldHVybiBbCiAgICAgICAgICAgIFRfQVJSQVksCiAgICAgICAgICAgIFRfT1BFTl9TSE9SVF9BUlJBWSwKICAgICAgICBdOwoKICAgIH0vL2VuZCByZWdpc3RlcigpCgoKICAgIC8qKgogICAgICogUHJvY2Vzc2VzIHRoaXMgc25pZmYsIHdoZW4gb25lIG9mIGl0cyB0b2tlbnMgaXMgZW5jb3VudGVyZWQuCiAgICAgKgogICAgICogQHBhcmFtIFxQSFBfQ29kZVNuaWZmZXJcRmlsZXNcRmlsZSAkcGhwY3NGaWxlIFRoZSBjdXJyZW50IGZpbGUgYmVpbmcgY2hlY2tlZC4KICAgICAqIEBwYXJhbSBpbnQgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YWNrUHRyICBUaGUgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgdG9rZW4gaW4KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgc3RhY2sgcGFzc2VkIGluICR0b2tlbnMuCiAgICAgKgogICAgICogQHJldHVybiB2b2lkCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBwcm9jZXNzKEZpbGUgJHBocGNzRmlsZSwgJHN0YWNrUHRyKQogICAgewogICAgICAgICR0b2tlbnMgPSAkcGhwY3NGaWxlLT5nZXRUb2tlbnMoKTsKCiAgICAgICAgaWYgKCR0b2tlbnNbJHN0YWNrUHRyXVsnY29kZSddID09PSBUX0FSUkFZKSB7CiAgICAgICAgICAgICRwaHBjc0ZpbGUtPnJlY29yZE1ldHJpYygkc3RhY2tQdHIsICdTaG9ydCBhcnJheSBzeW50YXggdXNlZCcsICdubycpOwoKICAgICAgICAgICAgLy8gQXJyYXkga2V5d29yZCBzaG91bGQgYmUgbG93ZXIgY2FzZS4KICAgICAgICAgICAgaWYgKCR0b2tlbnNbJHN0YWNrUHRyXVsnY29udGVudCddICE9PSBzdHJ0b2xvd2VyKCR0b2tlbnNbJHN0YWNrUHRyXVsnY29udGVudCddKSkgewogICAgICAgICAgICAgICAgaWYgKCR0b2tlbnNbJHN0YWNrUHRyXVsnY29udGVudCddID09PSBzdHJ0b3VwcGVyKCR0b2tlbnNbJHN0YWNrUHRyXVsnY29udGVudCddKSkgewogICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPnJlY29yZE1ldHJpYygkc3RhY2tQdHIsICdBcnJheSBrZXl3b3JkIGNhc2UnLCAndXBwZXInKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJHBocGNzRmlsZS0+cmVjb3JkTWV0cmljKCRzdGFja1B0ciwgJ0FycmF5IGtleXdvcmQgY2FzZScsICdtaXhlZCcpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRlcnJvciA9ICdBcnJheSBrZXl3b3JkIHNob3VsZCBiZSBsb3dlciBjYXNlOyBleHBlY3RlZCAiYXJyYXkiIGJ1dCBmb3VuZCAiJXMiJzsKICAgICAgICAgICAgICAgICRkYXRhICA9IFskdG9rZW5zWyRzdGFja1B0cl1bJ2NvbnRlbnQnXV07CiAgICAgICAgICAgICAgICAkZml4ICAgPSAkcGhwY3NGaWxlLT5hZGRGaXhhYmxlRXJyb3IoJGVycm9yLCAkc3RhY2tQdHIsICdOb3RMb3dlckNhc2UnLCAkZGF0YSk7CiAgICAgICAgICAgICAgICBpZiAoJGZpeCA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5yZXBsYWNlVG9rZW4oJHN0YWNrUHRyLCAnYXJyYXknKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPnJlY29yZE1ldHJpYygkc3RhY2tQdHIsICdBcnJheSBrZXl3b3JkIGNhc2UnLCAnbG93ZXInKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGFycmF5U3RhcnQgPSAkdG9rZW5zWyRzdGFja1B0cl1bJ3BhcmVudGhlc2lzX29wZW5lciddOwogICAgICAgICAgICBpZiAoaXNzZXQoJHRva2Vuc1skYXJyYXlTdGFydF1bJ3BhcmVudGhlc2lzX2Nsb3NlciddKSA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGFycmF5RW5kID0gJHRva2Vuc1skYXJyYXlTdGFydF1bJ3BhcmVudGhlc2lzX2Nsb3NlciddOwoKICAgICAgICAgICAgaWYgKCRhcnJheVN0YXJ0ICE9PSAoJHN0YWNrUHRyICsgMSkpIHsKICAgICAgICAgICAgICAgICRlcnJvciA9ICdUaGVyZSBtdXN0IGJlIG5vIHNwYWNlIGJldHdlZW4gdGhlICJhcnJheSIga2V5d29yZCBhbmQgdGhlIG9wZW5pbmcgcGFyZW50aGVzaXMnOwoKICAgICAgICAgICAgICAgICRuZXh0ID0gJHBocGNzRmlsZS0+ZmluZE5leHQoVF9XSElURVNQQUNFLCAoJHN0YWNrUHRyICsgMSksICRhcnJheVN0YXJ0LCB0cnVlKTsKICAgICAgICAgICAgICAgIGlmIChpc3NldChUb2tlbnM6OiRjb21tZW50VG9rZW5zWyR0b2tlbnNbJG5leHRdWydjb2RlJ11dKSA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IGhhdmUgYW55d2hlcmUgdG8gcHV0IHRoZSBjb21tZW50LCBzbyBkb24ndCBhdHRlbXB0IHRvIGZpeCBpdC4KICAgICAgICAgICAgICAgICAgICAkcGhwY3NGaWxlLT5hZGRFcnJvcigkZXJyb3IsICRzdGFja1B0ciwgJ1NwYWNlQWZ0ZXJLZXl3b3JkJyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICRmaXggPSAkcGhwY3NGaWxlLT5hZGRGaXhhYmxlRXJyb3IoJGVycm9yLCAkc3RhY2tQdHIsICdTcGFjZUFmdGVyS2V5d29yZCcpOwogICAgICAgICAgICAgICAgICAgIGlmICgkZml4ID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5iZWdpbkNoYW5nZXNldCgpOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCRpID0gKCRzdGFja1B0ciArIDEpOyAkaSA8ICRhcnJheVN0YXJ0OyAkaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGhwY3NGaWxlLT5maXhlci0+cmVwbGFjZVRva2VuKCRpLCAnJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5lbmRDaGFuZ2VzZXQoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkcGhwY3NGaWxlLT5yZWNvcmRNZXRyaWMoJHN0YWNrUHRyLCAnU2hvcnQgYXJyYXkgc3ludGF4IHVzZWQnLCAneWVzJyk7CiAgICAgICAgICAgICRhcnJheVN0YXJ0ID0gJHN0YWNrUHRyOwogICAgICAgICAgICAkYXJyYXlFbmQgICA9ICR0b2tlbnNbJHN0YWNrUHRyXVsnYnJhY2tldF9jbG9zZXInXTsKICAgICAgICB9Ly9lbmQgaWYKCiAgICAgICAgLy8gQ2hlY2sgZm9yIGVtcHR5IGFycmF5cy4KICAgICAgICAkY29udGVudCA9ICRwaHBjc0ZpbGUtPmZpbmROZXh0KFRfV0hJVEVTUEFDRSwgKCRhcnJheVN0YXJ0ICsgMSksICgkYXJyYXlFbmQgKyAxKSwgdHJ1ZSk7CiAgICAgICAgaWYgKCRjb250ZW50ID09PSAkYXJyYXlFbmQpIHsKICAgICAgICAgICAgLy8gRW1wdHkgYXJyYXksIGJ1dCBpZiB0aGUgYnJhY2tldHMgYXJlbid0IHRvZ2V0aGVyLCB0aGVyZSdzIGEgcHJvYmxlbS4KICAgICAgICAgICAgaWYgKCgkYXJyYXlFbmQgLSAkYXJyYXlTdGFydCkgIT09IDEpIHsKICAgICAgICAgICAgICAgICRlcnJvciA9ICdFbXB0eSBhcnJheSBkZWNsYXJhdGlvbiBtdXN0IGhhdmUgbm8gc3BhY2UgYmV0d2VlbiB0aGUgcGFyZW50aGVzZXMnOwogICAgICAgICAgICAgICAgJGZpeCAgID0gJHBocGNzRmlsZS0+YWRkRml4YWJsZUVycm9yKCRlcnJvciwgJHN0YWNrUHRyLCAnU3BhY2VJbkVtcHR5QXJyYXknKTsKCiAgICAgICAgICAgICAgICBpZiAoJGZpeCA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5iZWdpbkNoYW5nZXNldCgpOwogICAgICAgICAgICAgICAgICAgIGZvciAoJGkgPSAoJGFycmF5U3RhcnQgKyAxKTsgJGkgPCAkYXJyYXlFbmQ7ICRpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHBocGNzRmlsZS0+Zml4ZXItPnJlcGxhY2VUb2tlbigkaSwgJycpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgJHBocGNzRmlsZS0+Zml4ZXItPmVuZENoYW5nZXNldCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBXZSBjYW4gcmV0dXJuIGhlcmUgYmVjYXVzZSB0aGVyZSBpcyBub3RoaW5nIGVsc2UgdG8gY2hlY2suIEFsbCBjb2RlCiAgICAgICAgICAgIC8vIGJlbG93IGNhbiBhc3N1bWUgdGhhdCB0aGUgYXJyYXkgaXMgbm90IGVtcHR5LgogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAoJHRva2Vuc1skYXJyYXlTdGFydF1bJ2xpbmUnXSA9PT0gJHRva2Vuc1skYXJyYXlFbmRdWydsaW5lJ10pIHsKICAgICAgICAgICAgJHRoaXMtPnByb2Nlc3NTaW5nbGVMaW5lQXJyYXkoJHBocGNzRmlsZSwgJHN0YWNrUHRyLCAkYXJyYXlTdGFydCwgJGFycmF5RW5kKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkdGhpcy0+cHJvY2Vzc011bHRpTGluZUFycmF5KCRwaHBjc0ZpbGUsICRzdGFja1B0ciwgJGFycmF5U3RhcnQsICRhcnJheUVuZCk7CiAgICAgICAgfQoKICAgIH0vL2VuZCBwcm9jZXNzKCkKCgogICAgLyoqCiAgICAgKiBQcm9jZXNzZXMgYSBzaW5nbGUtbGluZSBhcnJheSBkZWZpbml0aW9uLgogICAgICoKICAgICAqIEBwYXJhbSBcUEhQX0NvZGVTbmlmZmVyXEZpbGVzXEZpbGUgJHBocGNzRmlsZSAgVGhlIGN1cnJlbnQgZmlsZSBiZWluZyBjaGVja2VkLgogICAgICogQHBhcmFtIGludCAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhY2tQdHIgICBUaGUgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgdG9rZW4KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHN0YWNrIHBhc3NlZCBpbiAkdG9rZW5zLgogICAgICogQHBhcmFtIGludCAgICAgICAgICAgICAgICAgICAgICAgICAkYXJyYXlTdGFydCBUaGUgdG9rZW4gdGhhdCBzdGFydHMgdGhlIGFycmF5IGRlZmluaXRpb24uCiAgICAgKiBAcGFyYW0gaW50ICAgICAgICAgICAgICAgICAgICAgICAgICRhcnJheUVuZCAgIFRoZSB0b2tlbiB0aGF0IGVuZHMgdGhlIGFycmF5IGRlZmluaXRpb24uCiAgICAgKgogICAgICogQHJldHVybiB2b2lkCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBwcm9jZXNzU2luZ2xlTGluZUFycmF5KCRwaHBjc0ZpbGUsICRzdGFja1B0ciwgJGFycmF5U3RhcnQsICRhcnJheUVuZCkKICAgIHsKICAgICAgICAkdG9rZW5zID0gJHBocGNzRmlsZS0+Z2V0VG9rZW5zKCk7CgogICAgICAgIC8vIENoZWNrIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSB2YWx1ZXMuIElmIHNvLCB0aGVuIGl0IGhhcyB0byBiZSBtdWx0aXBsZSBsaW5lcwogICAgICAgIC8vIHVubGVzcyBpdCBpcyBjb250YWluZWQgaW5zaWRlIGEgZnVuY3Rpb24gY2FsbCBvciBjb25kaXRpb24uCiAgICAgICAgJHZhbHVlQ291bnQgPSAwOwogICAgICAgICRjb21tYXMgICAgID0gW107CiAgICAgICAgZm9yICgkaSA9ICgkYXJyYXlTdGFydCArIDEpOyAkaSA8ICRhcnJheUVuZDsgJGkrKykgewogICAgICAgICAgICAvLyBTa2lwIGJyYWNrZXRlZCBzdGF0ZW1lbnRzLCBsaWtlIGZ1bmN0aW9uIGNhbGxzLgogICAgICAgICAgICBpZiAoJHRva2Vuc1skaV1bJ2NvZGUnXSA9PT0gVF9PUEVOX1BBUkVOVEhFU0lTKSB7CiAgICAgICAgICAgICAgICAkaSA9ICR0b2tlbnNbJGldWydwYXJlbnRoZXNpc19jbG9zZXInXTsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJHRva2Vuc1skaV1bJ2NvZGUnXSA9PT0gVF9DT01NQSkgewogICAgICAgICAgICAgICAgLy8gQmVmb3JlIGNvdW50aW5nIHRoaXMgY29tbWEsIG1ha2Ugc3VyZSB3ZSBhcmUgbm90CiAgICAgICAgICAgICAgICAvLyBhdCB0aGUgZW5kIG9mIHRoZSBhcnJheS4KICAgICAgICAgICAgICAgICRuZXh0ID0gJHBocGNzRmlsZS0+ZmluZE5leHQoVF9XSElURVNQQUNFLCAoJGkgKyAxKSwgJGFycmF5RW5kLCB0cnVlKTsKICAgICAgICAgICAgICAgIGlmICgkbmV4dCAhPT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgICAkdmFsdWVDb3VudCsrOwogICAgICAgICAgICAgICAgICAgICRjb21tYXNbXSA9ICRpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBpcyBhIGNvbW1hIGF0IHRoZSBlbmQgb2YgYSBzaW5nbGUgbGluZSBhcnJheS4KICAgICAgICAgICAgICAgICAgICAkZXJyb3IgPSAnQ29tbWEgbm90IGFsbG93ZWQgYWZ0ZXIgbGFzdCB2YWx1ZSBpbiBzaW5nbGUtbGluZSBhcnJheSBkZWNsYXJhdGlvbic7CiAgICAgICAgICAgICAgICAgICAgJGZpeCAgID0gJHBocGNzRmlsZS0+YWRkRml4YWJsZUVycm9yKCRlcnJvciwgJGksICdDb21tYUFmdGVyTGFzdCcpOwogICAgICAgICAgICAgICAgICAgIGlmICgkZml4ID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5yZXBsYWNlVG9rZW4oJGksICcnKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9Ly9lbmQgZm9yCgogICAgICAgIC8vIE5vdyBjaGVjayBlYWNoIG9mIHRoZSBkb3VibGUgYXJyb3dzIChpZiBhbnkpLgogICAgICAgICRuZXh0QXJyb3cgPSAkYXJyYXlTdGFydDsKICAgICAgICB3aGlsZSAoKCRuZXh0QXJyb3cgPSAkcGhwY3NGaWxlLT5maW5kTmV4dChUX0RPVUJMRV9BUlJPVywgKCRuZXh0QXJyb3cgKyAxKSwgJGFycmF5RW5kKSkgIT09IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICgkdG9rZW5zWygkbmV4dEFycm93IC0gMSldWydjb2RlJ10gIT09IFRfV0hJVEVTUEFDRSkgewogICAgICAgICAgICAgICAgJGNvbnRlbnQgPSAkdG9rZW5zWygkbmV4dEFycm93IC0gMSldWydjb250ZW50J107CiAgICAgICAgICAgICAgICAkZXJyb3IgICA9ICdFeHBlY3RlZCAxIHNwYWNlIGJldHdlZW4gIiVzIiBhbmQgZG91YmxlIGFycm93OyAwIGZvdW5kJzsKICAgICAgICAgICAgICAgICRkYXRhICAgID0gWyRjb250ZW50XTsKICAgICAgICAgICAgICAgICRmaXggICAgID0gJHBocGNzRmlsZS0+YWRkRml4YWJsZUVycm9yKCRlcnJvciwgJG5leHRBcnJvdywgJ05vU3BhY2VCZWZvcmVEb3VibGVBcnJvdycsICRkYXRhKTsKICAgICAgICAgICAgICAgIGlmICgkZml4ID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgJHBocGNzRmlsZS0+Zml4ZXItPmFkZENvbnRlbnRCZWZvcmUoJG5leHRBcnJvdywgJyAnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICRzcGFjZUxlbmd0aCA9ICR0b2tlbnNbKCRuZXh0QXJyb3cgLSAxKV1bJ2xlbmd0aCddOwogICAgICAgICAgICAgICAgaWYgKCRzcGFjZUxlbmd0aCAhPT0gMSkgewogICAgICAgICAgICAgICAgICAgICRjb250ZW50ID0gJHRva2Vuc1soJG5leHRBcnJvdyAtIDIpXVsnY29udGVudCddOwogICAgICAgICAgICAgICAgICAgICRlcnJvciAgID0gJ0V4cGVjdGVkIDEgc3BhY2UgYmV0d2VlbiAiJXMiIGFuZCBkb3VibGUgYXJyb3c7ICVzIGZvdW5kJzsKICAgICAgICAgICAgICAgICAgICAkZGF0YSAgICA9IFsKICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRlbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICRzcGFjZUxlbmd0aCwKICAgICAgICAgICAgICAgICAgICBdOwoKICAgICAgICAgICAgICAgICAgICAkZml4ID0gJHBocGNzRmlsZS0+YWRkRml4YWJsZUVycm9yKCRlcnJvciwgJG5leHRBcnJvdywgJ1NwYWNlQmVmb3JlRG91YmxlQXJyb3cnLCAkZGF0YSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRmaXggPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHBocGNzRmlsZS0+Zml4ZXItPnJlcGxhY2VUb2tlbigoJG5leHRBcnJvdyAtIDEpLCAnICcpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfS8vZW5kIGlmCgogICAgICAgICAgICBpZiAoJHRva2Vuc1soJG5leHRBcnJvdyArIDEpXVsnY29kZSddICE9PSBUX1dISVRFU1BBQ0UpIHsKICAgICAgICAgICAgICAgICRjb250ZW50ID0gJHRva2Vuc1soJG5leHRBcnJvdyArIDEpXVsnY29udGVudCddOwogICAgICAgICAgICAgICAgJGVycm9yICAgPSAnRXhwZWN0ZWQgMSBzcGFjZSBiZXR3ZWVuIGRvdWJsZSBhcnJvdyBhbmQgIiVzIjsgMCBmb3VuZCc7CiAgICAgICAgICAgICAgICAkZGF0YSAgICA9IFskY29udGVudF07CiAgICAgICAgICAgICAgICAkZml4ICAgICA9ICRwaHBjc0ZpbGUtPmFkZEZpeGFibGVFcnJvcigkZXJyb3IsICRuZXh0QXJyb3csICdOb1NwYWNlQWZ0ZXJEb3VibGVBcnJvdycsICRkYXRhKTsKICAgICAgICAgICAgICAgIGlmICgkZml4ID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgJHBocGNzRmlsZS0+Zml4ZXItPmFkZENvbnRlbnQoJG5leHRBcnJvdywgJyAnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICRzcGFjZUxlbmd0aCA9ICR0b2tlbnNbKCRuZXh0QXJyb3cgKyAxKV1bJ2xlbmd0aCddOwogICAgICAgICAgICAgICAgaWYgKCRzcGFjZUxlbmd0aCAhPT0gMSkgewogICAgICAgICAgICAgICAgICAgICRjb250ZW50ID0gJHRva2Vuc1soJG5leHRBcnJvdyArIDIpXVsnY29udGVudCddOwogICAgICAgICAgICAgICAgICAgICRlcnJvciAgID0gJ0V4cGVjdGVkIDEgc3BhY2UgYmV0d2VlbiBkb3VibGUgYXJyb3cgYW5kICIlcyI7ICVzIGZvdW5kJzsKICAgICAgICAgICAgICAgICAgICAkZGF0YSAgICA9IFsKICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRlbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICRzcGFjZUxlbmd0aCwKICAgICAgICAgICAgICAgICAgICBdOwoKICAgICAgICAgICAgICAgICAgICAkZml4ID0gJHBocGNzRmlsZS0+YWRkRml4YWJsZUVycm9yKCRlcnJvciwgJG5leHRBcnJvdywgJ1NwYWNlQWZ0ZXJEb3VibGVBcnJvdycsICRkYXRhKTsKICAgICAgICAgICAgICAgICAgICBpZiAoJGZpeCA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAkcGhwY3NGaWxlLT5maXhlci0+cmVwbGFjZVRva2VuKCgkbmV4dEFycm93ICsgMSksICcgJyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9Ly9lbmQgaWYKICAgICAgICB9Ly9lbmQgd2hpbGUKCiAgICAgICAgaWYgKCR2YWx1ZUNvdW50ID4gMCkgewogICAgICAgICAgICAkbmVzdGVkUGFyZW50aGVzaXMgPSBmYWxzZTsKICAgICAgICAgICAgaWYgKGlzc2V0KCR0b2tlbnNbJHN0YWNrUHRyXVsnbmVzdGVkX3BhcmVudGhlc2lzJ10pID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAkbmVzdGVkICAgICAgICAgICAgPSAkdG9rZW5zWyRzdGFja1B0cl1bJ25lc3RlZF9wYXJlbnRoZXNpcyddOwogICAgICAgICAgICAgICAgJG5lc3RlZFBhcmVudGhlc2lzID0gYXJyYXlfcG9wKCRuZXN0ZWQpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJG5lc3RlZFBhcmVudGhlc2lzID09PSBmYWxzZQogICAgICAgICAgICAgICAgfHwgJHRva2Vuc1skbmVzdGVkUGFyZW50aGVzaXNdWydsaW5lJ10gIT09ICR0b2tlbnNbJHN0YWNrUHRyXVsnbGluZSddCiAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgJGVycm9yID0gJ0FycmF5IHdpdGggbXVsdGlwbGUgdmFsdWVzIGNhbm5vdCBiZSBkZWNsYXJlZCBvbiBhIHNpbmdsZSBsaW5lJzsKICAgICAgICAgICAgICAgICRmaXggICA9ICRwaHBjc0ZpbGUtPmFkZEZpeGFibGVFcnJvcigkZXJyb3IsICRzdGFja1B0ciwgJ1NpbmdsZUxpbmVOb3RBbGxvd2VkJyk7CiAgICAgICAgICAgICAgICBpZiAoJGZpeCA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5iZWdpbkNoYW5nZXNldCgpOwogICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5hZGROZXdsaW5lKCRhcnJheVN0YXJ0KTsKICAgICAgICAgICAgICAgICAgICAkcGhwY3NGaWxlLT5maXhlci0+YWRkTmV3bGluZUJlZm9yZSgkYXJyYXlFbmQpOwogICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5lbmRDaGFuZ2VzZXQoKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFdlIGhhdmUgYSBtdWx0aXBsZSB2YWx1ZSBhcnJheSB0aGF0IGlzIGluc2lkZSBhIGNvbmRpdGlvbiBvcgogICAgICAgICAgICAvLyBmdW5jdGlvbi4gQ2hlY2sgaXRzIHNwYWNpbmcgaXMgY29ycmVjdC4KICAgICAgICAgICAgZm9yZWFjaCAoJGNvbW1hcyBhcyAkY29tbWEpIHsKICAgICAgICAgICAgICAgIGlmICgkdG9rZW5zWygkY29tbWEgKyAxKV1bJ2NvZGUnXSAhPT0gVF9XSElURVNQQUNFKSB7CiAgICAgICAgICAgICAgICAgICAgJGNvbnRlbnQgPSAkdG9rZW5zWygkY29tbWEgKyAxKV1bJ2NvbnRlbnQnXTsKICAgICAgICAgICAgICAgICAgICAkZXJyb3IgICA9ICdFeHBlY3RlZCAxIHNwYWNlIGJldHdlZW4gY29tbWEgYW5kICIlcyI7IDAgZm91bmQnOwogICAgICAgICAgICAgICAgICAgICRkYXRhICAgID0gWyRjb250ZW50XTsKICAgICAgICAgICAgICAgICAgICAkZml4ICAgICA9ICRwaHBjc0ZpbGUtPmFkZEZpeGFibGVFcnJvcigkZXJyb3IsICRjb21tYSwgJ05vU3BhY2VBZnRlckNvbW1hJywgJGRhdGEpOwogICAgICAgICAgICAgICAgICAgIGlmICgkZml4ID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5hZGRDb250ZW50KCRjb21tYSwgJyAnKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICRzcGFjZUxlbmd0aCA9ICR0b2tlbnNbKCRjb21tYSArIDEpXVsnbGVuZ3RoJ107CiAgICAgICAgICAgICAgICAgICAgaWYgKCRzcGFjZUxlbmd0aCAhPT0gMSkgewogICAgICAgICAgICAgICAgICAgICAgICAkY29udGVudCA9ICR0b2tlbnNbKCRjb21tYSArIDIpXVsnY29udGVudCddOwogICAgICAgICAgICAgICAgICAgICAgICAkZXJyb3IgICA9ICdFeHBlY3RlZCAxIHNwYWNlIGJldHdlZW4gY29tbWEgYW5kICIlcyI7ICVzIGZvdW5kJzsKICAgICAgICAgICAgICAgICAgICAgICAgJGRhdGEgICAgPSBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29udGVudCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzcGFjZUxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgXTsKCiAgICAgICAgICAgICAgICAgICAgICAgICRmaXggPSAkcGhwY3NGaWxlLT5hZGRGaXhhYmxlRXJyb3IoJGVycm9yLCAkY29tbWEsICdTcGFjZUFmdGVyQ29tbWEnLCAkZGF0YSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZml4ID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGhwY3NGaWxlLT5maXhlci0+cmVwbGFjZVRva2VuKCgkY29tbWEgKyAxKSwgJyAnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0vL2VuZCBpZgoKICAgICAgICAgICAgICAgIGlmICgkdG9rZW5zWygkY29tbWEgLSAxKV1bJ2NvZGUnXSA9PT0gVF9XSElURVNQQUNFKSB7CiAgICAgICAgICAgICAgICAgICAgJGNvbnRlbnQgICAgID0gJHRva2Vuc1soJGNvbW1hIC0gMildWydjb250ZW50J107CiAgICAgICAgICAgICAgICAgICAgJHNwYWNlTGVuZ3RoID0gJHRva2Vuc1soJGNvbW1hIC0gMSldWydsZW5ndGgnXTsKICAgICAgICAgICAgICAgICAgICAkZXJyb3IgICAgICAgPSAnRXhwZWN0ZWQgMCBzcGFjZXMgYmV0d2VlbiAiJXMiIGFuZCBjb21tYTsgJXMgZm91bmQnOwogICAgICAgICAgICAgICAgICAgICRkYXRhICAgICAgICA9IFsKICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRlbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICRzcGFjZUxlbmd0aCwKICAgICAgICAgICAgICAgICAgICBdOwoKICAgICAgICAgICAgICAgICAgICAkZml4ID0gJHBocGNzRmlsZS0+YWRkRml4YWJsZUVycm9yKCRlcnJvciwgJGNvbW1hLCAnU3BhY2VCZWZvcmVDb21tYScsICRkYXRhKTsKICAgICAgICAgICAgICAgICAgICBpZiAoJGZpeCA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAkcGhwY3NGaWxlLT5maXhlci0+cmVwbGFjZVRva2VuKCgkY29tbWEgLSAxKSwgJycpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfS8vZW5kIGZvcmVhY2gKICAgICAgICB9Ly9lbmQgaWYKCiAgICB9Ly9lbmQgcHJvY2Vzc1NpbmdsZUxpbmVBcnJheSgpCgoKICAgIC8qKgogICAgICogUHJvY2Vzc2VzIGEgbXVsdGktbGluZSBhcnJheSBkZWZpbml0aW9uLgogICAgICoKICAgICAqIEBwYXJhbSBcUEhQX0NvZGVTbmlmZmVyXEZpbGVzXEZpbGUgJHBocGNzRmlsZSAgVGhlIGN1cnJlbnQgZmlsZSBiZWluZyBjaGVja2VkLgogICAgICogQHBhcmFtIGludCAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhY2tQdHIgICBUaGUgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgdG9rZW4KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHN0YWNrIHBhc3NlZCBpbiAkdG9rZW5zLgogICAgICogQHBhcmFtIGludCAgICAgICAgICAgICAgICAgICAgICAgICAkYXJyYXlTdGFydCBUaGUgdG9rZW4gdGhhdCBzdGFydHMgdGhlIGFycmF5IGRlZmluaXRpb24uCiAgICAgKiBAcGFyYW0gaW50ICAgICAgICAgICAgICAgICAgICAgICAgICRhcnJheUVuZCAgIFRoZSB0b2tlbiB0aGF0IGVuZHMgdGhlIGFycmF5IGRlZmluaXRpb24uCiAgICAgKgogICAgICogQHJldHVybiB2b2lkCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBwcm9jZXNzTXVsdGlMaW5lQXJyYXkoJHBocGNzRmlsZSwgJHN0YWNrUHRyLCAkYXJyYXlTdGFydCwgJGFycmF5RW5kKQogICAgewogICAgICAgICR0b2tlbnMgICAgICAgPSAkcGhwY3NGaWxlLT5nZXRUb2tlbnMoKTsKICAgICAgICAka2V5d29yZFN0YXJ0ID0gJHRva2Vuc1skc3RhY2tQdHJdWydjb2x1bW4nXTsKCiAgICAgICAgLy8gQ2hlY2sgdGhlIGNsb3NpbmcgYnJhY2tldCBpcyBvbiBhIG5ldyBsaW5lLgogICAgICAgICRsYXN0Q29udGVudCA9ICRwaHBjc0ZpbGUtPmZpbmRQcmV2aW91cyhUX1dISVRFU1BBQ0UsICgkYXJyYXlFbmQgLSAxKSwgJGFycmF5U3RhcnQsIHRydWUpOwogICAgICAgIGlmICgkdG9rZW5zWyRsYXN0Q29udGVudF1bJ2xpbmUnXSA9PT0gJHRva2Vuc1skYXJyYXlFbmRdWydsaW5lJ10pIHsKICAgICAgICAgICAgJGVycm9yID0gJ0Nsb3NpbmcgcGFyZW50aGVzaXMgb2YgYXJyYXkgZGVjbGFyYXRpb24gbXVzdCBiZSBvbiBhIG5ldyBsaW5lJzsKICAgICAgICAgICAgJGZpeCAgID0gJHBocGNzRmlsZS0+YWRkRml4YWJsZUVycm9yKCRlcnJvciwgJGFycmF5RW5kLCAnQ2xvc2VCcmFjZU5ld0xpbmUnKTsKICAgICAgICAgICAgaWYgKCRmaXggPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5hZGROZXdsaW5lQmVmb3JlKCRhcnJheUVuZCk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKCR0b2tlbnNbJGFycmF5RW5kXVsnY29sdW1uJ10gIT09ICRrZXl3b3JkU3RhcnQpIHsKICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIGNsb3NpbmcgYnJhY2tldCBpcyBsaW5lZCB1cCB1bmRlciB0aGUgImEiIGluIGFycmF5LgogICAgICAgICAgICAkZXhwZWN0ZWQgPSAoJGtleXdvcmRTdGFydCAtIDEpOwogICAgICAgICAgICAkZm91bmQgICAgPSAoJHRva2Vuc1skYXJyYXlFbmRdWydjb2x1bW4nXSAtIDEpOwogICAgICAgICAgICAkZXJyb3IgICAgPSAnQ2xvc2luZyBwYXJlbnRoZXNpcyBub3QgYWxpZ25lZCBjb3JyZWN0bHk7IGV4cGVjdGVkICVzIHNwYWNlKHMpIGJ1dCBmb3VuZCAlcyc7CiAgICAgICAgICAgICRkYXRhICAgICA9IFsKICAgICAgICAgICAgICAgICRleHBlY3RlZCwKICAgICAgICAgICAgICAgICRmb3VuZCwKICAgICAgICAgICAgXTsKCiAgICAgICAgICAgICRmaXggPSAkcGhwY3NGaWxlLT5hZGRGaXhhYmxlRXJyb3IoJGVycm9yLCAkYXJyYXlFbmQsICdDbG9zZUJyYWNlTm90QWxpZ25lZCcsICRkYXRhKTsKICAgICAgICAgICAgaWYgKCRmaXggPT09IHRydWUpIHsKICAgICAgICAgICAgICAgIGlmICgkZm91bmQgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAkcGhwY3NGaWxlLT5maXhlci0+YWRkQ29udGVudCgoJGFycmF5RW5kIC0gMSksIHN0cl9yZXBlYXQoJyAnLCAkZXhwZWN0ZWQpKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJHBocGNzRmlsZS0+Zml4ZXItPnJlcGxhY2VUb2tlbigoJGFycmF5RW5kIC0gMSksIHN0cl9yZXBlYXQoJyAnLCAkZXhwZWN0ZWQpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0vL2VuZCBpZgoKICAgICAgICAka2V5VXNlZCAgICA9IGZhbHNlOwogICAgICAgICRzaW5nbGVVc2VkID0gZmFsc2U7CiAgICAgICAgJGluZGljZXMgICAgPSBbXTsKICAgICAgICAkbWF4TGVuZ3RoICA9IDA7CgogICAgICAgIGlmICgkdG9rZW5zWyRzdGFja1B0cl1bJ2NvZGUnXSA9PT0gVF9BUlJBWSkgewogICAgICAgICAgICAkbGFzdFRva2VuID0gJHRva2Vuc1skc3RhY2tQdHJdWydwYXJlbnRoZXNpc19vcGVuZXInXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkbGFzdFRva2VuID0gJHN0YWNrUHRyOwogICAgICAgIH0KCiAgICAgICAgLy8gRmluZCBhbGwgdGhlIGRvdWJsZSBhcnJvd3MgdGhhdCByZXNpZGUgaW4gdGhpcyBzY29wZS4KICAgICAgICBmb3IgKCRuZXh0VG9rZW4gPSAoJHN0YWNrUHRyICsgMSk7ICRuZXh0VG9rZW4gPCAkYXJyYXlFbmQ7ICRuZXh0VG9rZW4rKykgewogICAgICAgICAgICAvLyBTa2lwIGJyYWNrZXRlZCBzdGF0ZW1lbnRzLCBsaWtlIGZ1bmN0aW9uIGNhbGxzLgogICAgICAgICAgICBpZiAoJHRva2Vuc1skbmV4dFRva2VuXVsnY29kZSddID09PSBUX09QRU5fUEFSRU5USEVTSVMKICAgICAgICAgICAgICAgICYmIChpc3NldCgkdG9rZW5zWyRuZXh0VG9rZW5dWydwYXJlbnRoZXNpc19vd25lciddKSA9PT0gZmFsc2UKICAgICAgICAgICAgICAgIHx8ICR0b2tlbnNbJG5leHRUb2tlbl1bJ3BhcmVudGhlc2lzX293bmVyJ10gIT09ICRzdGFja1B0cikKICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICAkbmV4dFRva2VuID0gJHRva2Vuc1skbmV4dFRva2VuXVsncGFyZW50aGVzaXNfY2xvc2VyJ107CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCR0b2tlbnNbJG5leHRUb2tlbl1bJ2NvZGUnXSA9PT0gVF9BUlJBWQogICAgICAgICAgICAgICAgfHwgJHRva2Vuc1skbmV4dFRva2VuXVsnY29kZSddID09PSBUX09QRU5fU0hPUlRfQVJSQVkKICAgICAgICAgICAgICAgIHx8ICR0b2tlbnNbJG5leHRUb2tlbl1bJ2NvZGUnXSA9PT0gVF9DTE9TVVJFCiAgICAgICAgICAgICAgICB8fCAkdG9rZW5zWyRuZXh0VG9rZW5dWydjb2RlJ10gPT09IFRfRk4KICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICAvLyBMZXQgc3Vic2VxdWVudCBjYWxscyBvZiB0aGlzIHRlc3QgaGFuZGxlIG5lc3RlZCBhcnJheXMuCiAgICAgICAgICAgICAgICBpZiAoJHRva2Vuc1skbGFzdFRva2VuXVsnY29kZSddICE9PSBUX0RPVUJMRV9BUlJPVykgewogICAgICAgICAgICAgICAgICAgICRpbmRpY2VzW10gPSBbJ3ZhbHVlJyA9PiAkbmV4dFRva2VuXTsKICAgICAgICAgICAgICAgICAgICAkbGFzdFRva2VuID0gJG5leHRUb2tlbjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoJHRva2Vuc1skbmV4dFRva2VuXVsnY29kZSddID09PSBUX0FSUkFZKSB7CiAgICAgICAgICAgICAgICAgICAgJG5leHRUb2tlbiA9ICR0b2tlbnNbJHRva2Vuc1skbmV4dFRva2VuXVsncGFyZW50aGVzaXNfb3BlbmVyJ11dWydwYXJlbnRoZXNpc19jbG9zZXInXTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHRva2Vuc1skbmV4dFRva2VuXVsnY29kZSddID09PSBUX09QRU5fU0hPUlRfQVJSQVkpIHsKICAgICAgICAgICAgICAgICAgICAkbmV4dFRva2VuID0gJHRva2Vuc1skbmV4dFRva2VuXVsnYnJhY2tldF9jbG9zZXInXTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgLy8gVF9DTE9TVVJFLgogICAgICAgICAgICAgICAgICAgICRuZXh0VG9rZW4gPSAkdG9rZW5zWyRuZXh0VG9rZW5dWydzY29wZV9jbG9zZXInXTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkbmV4dFRva2VuID0gJHBocGNzRmlsZS0+ZmluZE5leHQoVF9XSElURVNQQUNFLCAoJG5leHRUb2tlbiArIDEpLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgIGlmICgkdG9rZW5zWyRuZXh0VG9rZW5dWydjb2RlJ10gIT09IFRfQ09NTUEpIHsKICAgICAgICAgICAgICAgICAgICAkbmV4dFRva2VuLS07CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICRsYXN0VG9rZW4gPSAkbmV4dFRva2VuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9Ly9lbmQgaWYKCiAgICAgICAgICAgIGlmICgkdG9rZW5zWyRuZXh0VG9rZW5dWydjb2RlJ10gIT09IFRfRE9VQkxFX0FSUk9XCiAgICAgICAgICAgICAgICAmJiAkdG9rZW5zWyRuZXh0VG9rZW5dWydjb2RlJ10gIT09IFRfQ09NTUEKICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGN1cnJlbnRFbnRyeSA9IFtdOwoKICAgICAgICAgICAgaWYgKCR0b2tlbnNbJG5leHRUb2tlbl1bJ2NvZGUnXSA9PT0gVF9DT01NQSkgewogICAgICAgICAgICAgICAgJHN0YWNrUHRyQ291bnQgPSAwOwogICAgICAgICAgICAgICAgaWYgKGlzc2V0KCR0b2tlbnNbJHN0YWNrUHRyXVsnbmVzdGVkX3BhcmVudGhlc2lzJ10pID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgJHN0YWNrUHRyQ291bnQgPSBjb3VudCgkdG9rZW5zWyRzdGFja1B0cl1bJ25lc3RlZF9wYXJlbnRoZXNpcyddKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkY29tbWFDb3VudCA9IDA7CiAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJHRva2Vuc1skbmV4dFRva2VuXVsnbmVzdGVkX3BhcmVudGhlc2lzJ10pID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgJGNvbW1hQ291bnQgPSBjb3VudCgkdG9rZW5zWyRuZXh0VG9rZW5dWyduZXN0ZWRfcGFyZW50aGVzaXMnXSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCR0b2tlbnNbJHN0YWNrUHRyXVsnY29kZSddID09PSBUX0FSUkFZKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBwYXJlbnRoZXNpcyB0aGF0IGFyZSB1c2VkIHRvIGRlZmluZSB0aGUgYXJyYXkuCiAgICAgICAgICAgICAgICAgICAgICAgICRjb21tYUNvdW50LS07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICgkY29tbWFDb3VudCA+ICRzdGFja1B0ckNvdW50KSB7CiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBjb21tYSBpcyBpbnNpZGUgbW9yZSBwYXJlbnRoZXNpcyB0aGFuIHRoZSBBUlJBWSBrZXl3b3JkLAogICAgICAgICAgICAgICAgICAgIC8vIHRoZW4gdGhlcmUgaXQgaXMgYWN0dWFsbHkgYSBjb21tYSB1c2VkIHRvIHNlcGFyYXRlIGFyZ3VtZW50cwogICAgICAgICAgICAgICAgICAgIC8vIGluIGEgZnVuY3Rpb24gY2FsbC4KICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoJGtleVVzZWQgPT09IHRydWUgJiYgJHRva2Vuc1skbGFzdFRva2VuXVsnY29kZSddID09PSBUX0NPTU1BKSB7CiAgICAgICAgICAgICAgICAgICAgJGVycm9yID0gJ05vIGtleSBzcGVjaWZpZWQgZm9yIGFycmF5IGVudHJ5OyBmaXJzdCBlbnRyeSBzcGVjaWZpZXMga2V5JzsKICAgICAgICAgICAgICAgICAgICAkcGhwY3NGaWxlLT5hZGRFcnJvcigkZXJyb3IsICRuZXh0VG9rZW4sICdOb0tleVNwZWNpZmllZCcpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoJGtleVVzZWQgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCR0b2tlbnNbKCRuZXh0VG9rZW4gLSAxKV1bJ2NvZGUnXSA9PT0gVF9XSElURVNQQUNFKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRwcmV2ID0gJHBocGNzRmlsZS0+ZmluZFByZXZpb3VzKFRva2Vuczo6JGVtcHR5VG9rZW5zLCAoJG5leHRUb2tlbiAtIDEpLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCgkdG9rZW5zWyRwcmV2XVsnY29kZSddICE9PSBUX0VORF9IRVJFRE9DCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAkdG9rZW5zWyRwcmV2XVsnY29kZSddICE9PSBUX0VORF9OT1dET0MpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCAkdG9rZW5zWygkbmV4dFRva2VuIC0gMSldWydsaW5lJ10gPT09ICR0b2tlbnNbJG5leHRUb2tlbl1bJ2xpbmUnXQogICAgICAgICAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZW50ID0gJHRva2Vuc1soJG5leHRUb2tlbiAtIDIpXVsnY29udGVudCddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR0b2tlbnNbKCRuZXh0VG9rZW4gLSAxKV1bJ2NvbnRlbnQnXSA9PT0gJHBocGNzRmlsZS0+ZW9sQ2hhcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzcGFjZUxlbmd0aCA9ICduZXdsaW5lJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNwYWNlTGVuZ3RoID0gJHRva2Vuc1soJG5leHRUb2tlbiAtIDEpXVsnbGVuZ3RoJ107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVycm9yID0gJ0V4cGVjdGVkIDAgc3BhY2VzIGJlZm9yZSBjb21tYTsgJXMgZm91bmQnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGRhdGEgID0gWyRzcGFjZUxlbmd0aF07CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZpeCA9ICRwaHBjc0ZpbGUtPmFkZEZpeGFibGVFcnJvcigkZXJyb3IsICRuZXh0VG9rZW4sICdTcGFjZUJlZm9yZUNvbW1hJywgJGRhdGEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRmaXggPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGhwY3NGaWxlLT5maXhlci0+cmVwbGFjZVRva2VuKCgkbmV4dFRva2VuIC0gMSksICcnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0vL2VuZCBpZgoKICAgICAgICAgICAgICAgICAgICAkdmFsdWVDb250ZW50ID0gJHBocGNzRmlsZS0+ZmluZE5leHQoCiAgICAgICAgICAgICAgICAgICAgICAgIFRva2Vuczo6JGVtcHR5VG9rZW5zLAogICAgICAgICAgICAgICAgICAgICAgICAoJGxhc3RUb2tlbiArIDEpLAogICAgICAgICAgICAgICAgICAgICAgICAkbmV4dFRva2VuLAogICAgICAgICAgICAgICAgICAgICAgICB0cnVlCiAgICAgICAgICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICAgICAgICAgJGluZGljZXNbXSAgPSBbJ3ZhbHVlJyA9PiAkdmFsdWVDb250ZW50XTsKICAgICAgICAgICAgICAgICAgICAkc2luZ2xlVXNlZCA9IHRydWU7CiAgICAgICAgICAgICAgICB9Ly9lbmQgaWYKCiAgICAgICAgICAgICAgICAkbGFzdFRva2VuID0gJG5leHRUb2tlbjsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9Ly9lbmQgaWYKCiAgICAgICAgICAgIGlmICgkdG9rZW5zWyRuZXh0VG9rZW5dWydjb2RlJ10gPT09IFRfRE9VQkxFX0FSUk9XKSB7CiAgICAgICAgICAgICAgICBpZiAoJHNpbmdsZVVzZWQgPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICAkZXJyb3IgPSAnS2V5IHNwZWNpZmllZCBmb3IgYXJyYXkgZW50cnk7IGZpcnN0IGVudHJ5IGhhcyBubyBrZXknOwogICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmFkZEVycm9yKCRlcnJvciwgJG5leHRUb2tlbiwgJ0tleVNwZWNpZmllZCcpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkY3VycmVudEVudHJ5WydhcnJvdyddID0gJG5leHRUb2tlbjsKICAgICAgICAgICAgICAgICRrZXlVc2VkID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBzdGFydCBvZiBpbmRleCB0aGF0IHVzZXMgdGhpcyBkb3VibGUgYXJyb3cuCiAgICAgICAgICAgICAgICAkaW5kZXhFbmQgICA9ICRwaHBjc0ZpbGUtPmZpbmRQcmV2aW91cyhUX1dISVRFU1BBQ0UsICgkbmV4dFRva2VuIC0gMSksICRhcnJheVN0YXJ0LCB0cnVlKTsKICAgICAgICAgICAgICAgICRpbmRleFN0YXJ0ID0gJHBocGNzRmlsZS0+ZmluZFN0YXJ0T2ZTdGF0ZW1lbnQoJGluZGV4RW5kKTsKCiAgICAgICAgICAgICAgICBpZiAoJGluZGV4U3RhcnQgPT09ICRpbmRleEVuZCkgewogICAgICAgICAgICAgICAgICAgICRjdXJyZW50RW50cnlbJ2luZGV4J10gICAgICAgICA9ICRpbmRleEVuZDsKICAgICAgICAgICAgICAgICAgICAkY3VycmVudEVudHJ5WydpbmRleF9jb250ZW50J10gPSAkdG9rZW5zWyRpbmRleEVuZF1bJ2NvbnRlbnQnXTsKICAgICAgICAgICAgICAgICAgICAkY3VycmVudEVudHJ5WydpbmRleF9sZW5ndGgnXSAgPSAkdG9rZW5zWyRpbmRleEVuZF1bJ2xlbmd0aCddOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkY3VycmVudEVudHJ5WydpbmRleCddICAgICAgICAgPSAkaW5kZXhTdGFydDsKICAgICAgICAgICAgICAgICAgICAkY3VycmVudEVudHJ5WydpbmRleF9jb250ZW50J10gPSAnJzsKICAgICAgICAgICAgICAgICAgICAkY3VycmVudEVudHJ5WydpbmRleF9sZW5ndGgnXSAgPSAwOwogICAgICAgICAgICAgICAgICAgIGZvciAoJGkgPSAkaW5kZXhTdGFydDsgJGkgPD0gJGluZGV4RW5kOyAkaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRjdXJyZW50RW50cnlbJ2luZGV4X2NvbnRlbnQnXSAuPSAkdG9rZW5zWyRpXVsnY29udGVudCddOwogICAgICAgICAgICAgICAgICAgICAgICAkY3VycmVudEVudHJ5WydpbmRleF9sZW5ndGgnXSAgKz0gJHRva2Vuc1skaV1bJ2xlbmd0aCddOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoJG1heExlbmd0aCA8ICRjdXJyZW50RW50cnlbJ2luZGV4X2xlbmd0aCddKSB7CiAgICAgICAgICAgICAgICAgICAgJG1heExlbmd0aCA9ICRjdXJyZW50RW50cnlbJ2luZGV4X2xlbmd0aCddOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIEZpbmQgdGhlIHZhbHVlIG9mIHRoaXMgaW5kZXguCiAgICAgICAgICAgICAgICAkbmV4dENvbnRlbnQgPSAkcGhwY3NGaWxlLT5maW5kTmV4dCgKICAgICAgICAgICAgICAgICAgICBUb2tlbnM6OiRlbXB0eVRva2VucywKICAgICAgICAgICAgICAgICAgICAoJG5leHRUb2tlbiArIDEpLAogICAgICAgICAgICAgICAgICAgICRhcnJheUVuZCwKICAgICAgICAgICAgICAgICAgICB0cnVlCiAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgICAgICRjdXJyZW50RW50cnlbJ3ZhbHVlJ10gPSAkbmV4dENvbnRlbnQ7CiAgICAgICAgICAgICAgICAkaW5kaWNlc1tdID0gJGN1cnJlbnRFbnRyeTsKICAgICAgICAgICAgICAgICRsYXN0VG9rZW4gPSAkbmV4dFRva2VuOwogICAgICAgICAgICB9Ly9lbmQgaWYKICAgICAgICB9Ly9lbmQgZm9yCgogICAgICAgIC8vIENoZWNrIGZvciBtdWx0aS1saW5lIGFycmF5cyB0aGF0IHNob3VsZCBiZSBzaW5nbGUtbGluZS4KICAgICAgICAkc2luZ2xlVmFsdWUgPSBmYWxzZTsKCiAgICAgICAgaWYgKGVtcHR5KCRpbmRpY2VzKSA9PT0gdHJ1ZSkgewogICAgICAgICAgICAkc2luZ2xlVmFsdWUgPSB0cnVlOwogICAgICAgIH0gZWxzZSBpZiAoY291bnQoJGluZGljZXMpID09PSAxICYmICR0b2tlbnNbJGxhc3RUb2tlbl1bJ2NvZGUnXSA9PT0gVF9DT01NQSkgewogICAgICAgICAgICAvLyBUaGVyZSBtYXkgYmUgYW5vdGhlciBhcnJheSB2YWx1ZSB3aXRob3V0IGEgY29tbWEuCiAgICAgICAgICAgICRleGNsdWRlICAgICA9IFRva2Vuczo6JGVtcHR5VG9rZW5zOwogICAgICAgICAgICAkZXhjbHVkZVtdICAgPSBUX0NPTU1BOwogICAgICAgICAgICAkbmV4dENvbnRlbnQgPSAkcGhwY3NGaWxlLT5maW5kTmV4dCgkZXhjbHVkZSwgKCRpbmRpY2VzWzBdWyd2YWx1ZSddICsgMSksICRhcnJheUVuZCwgdHJ1ZSk7CiAgICAgICAgICAgIGlmICgkbmV4dENvbnRlbnQgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAkc2luZ2xlVmFsdWUgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoJHNpbmdsZVZhbHVlID09PSB0cnVlKSB7CiAgICAgICAgICAgIC8vIEJlZm9yZSB3ZSBjb21wbGFpbiwgbWFrZSBzdXJlIHRoZSBzaW5nbGUgdmFsdWUgaXNuJ3QgYSBoZXJlL25vd2RvYy4KICAgICAgICAgICAgJG5leHQgPSAkcGhwY3NGaWxlLT5maW5kTmV4dChUb2tlbnM6OiRoZXJlZG9jVG9rZW5zLCAoJGFycmF5U3RhcnQgKyAxKSwgKCRhcnJheUVuZCAtIDEpKTsKICAgICAgICAgICAgaWYgKCRuZXh0ID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgLy8gQXJyYXkgY2Fubm90IGJlIGVtcHR5LCBzbyB0aGlzIGlzIGEgbXVsdGktbGluZSBhcnJheSB3aXRoCiAgICAgICAgICAgICAgICAvLyBhIHNpbmdsZSB2YWx1ZS4gSXQgc2hvdWxkIGJlIGRlZmluZWQgb24gc2luZ2xlIGxpbmUuCiAgICAgICAgICAgICAgICAkZXJyb3IgICAgID0gJ011bHRpLWxpbmUgYXJyYXkgY29udGFpbnMgYSBzaW5nbGUgdmFsdWU7IHVzZSBzaW5nbGUtbGluZSBhcnJheSBpbnN0ZWFkJzsKICAgICAgICAgICAgICAgICRlcnJvckNvZGUgPSAnTXVsdGlMaW5lTm90QWxsb3dlZCc7CgogICAgICAgICAgICAgICAgJGZpbmQgICAgPSBUb2tlbnM6OiRwaHBjc0NvbW1lbnRUb2tlbnM7CiAgICAgICAgICAgICAgICAkZmluZFtdICA9IFRfQ09NTUVOVDsKICAgICAgICAgICAgICAgICRjb21tZW50ID0gJHBocGNzRmlsZS0+ZmluZE5leHQoJGZpbmQsICgkYXJyYXlTdGFydCArIDEpLCAkYXJyYXlFbmQpOwogICAgICAgICAgICAgICAgaWYgKCRjb21tZW50ID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgICAgICRmaXggPSAkcGhwY3NGaWxlLT5hZGRGaXhhYmxlRXJyb3IoJGVycm9yLCAkc3RhY2tQdHIsICRlcnJvckNvZGUpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkZml4ID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgJHBocGNzRmlsZS0+YWRkRXJyb3IoJGVycm9yLCAkc3RhY2tQdHIsICRlcnJvckNvZGUpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICgkZml4ID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgJHBocGNzRmlsZS0+Zml4ZXItPmJlZ2luQ2hhbmdlc2V0KCk7CiAgICAgICAgICAgICAgICAgICAgZm9yICgkaSA9ICgkYXJyYXlTdGFydCArIDEpOyAkaSA8ICRhcnJheUVuZDsgJGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHRva2Vuc1skaV1bJ2NvZGUnXSAhPT0gVF9XSElURVNQQUNFKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgJHBocGNzRmlsZS0+Zml4ZXItPnJlcGxhY2VUb2tlbigkaSwgJycpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZm9yICgkaSA9ICgkYXJyYXlFbmQgLSAxKTsgJGkgPiAkYXJyYXlTdGFydDsgJGktLSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHRva2Vuc1skaV1bJ2NvZGUnXSAhPT0gVF9XSElURVNQQUNFKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgJHBocGNzRmlsZS0+Zml4ZXItPnJlcGxhY2VUb2tlbigkaSwgJycpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgJHBocGNzRmlsZS0+Zml4ZXItPmVuZENoYW5nZXNldCgpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfS8vZW5kIGlmCiAgICAgICAgfS8vZW5kIGlmCgogICAgICAgIC8qCiAgICAgICAgICAgIFRoaXMgc2VjdGlvbiBjaGVja3MgZm9yIGFycmF5cyB0aGF0IGRvbid0IHNwZWNpZnkga2V5cy4KCiAgICAgICAgICAgIEFycmF5cyBzdWNoIGFzOgogICAgICAgICAgICAgICBhcnJheSgKICAgICAgICAgICAgICAgICdhYWEnLAogICAgICAgICAgICAgICAgJ2JiYicsCiAgICAgICAgICAgICAgICAnZCcsCiAgICAgICAgICAgICAgICk7CiAgICAgICAgKi8KCiAgICAgICAgaWYgKCRrZXlVc2VkID09PSBmYWxzZSAmJiBlbXB0eSgkaW5kaWNlcykgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICRjb3VudCAgICAgPSBjb3VudCgkaW5kaWNlcyk7CiAgICAgICAgICAgICRsYXN0SW5kZXggPSAkaW5kaWNlc1soJGNvdW50IC0gMSldWyd2YWx1ZSddOwoKICAgICAgICAgICAgJHRyYWlsaW5nQ29udGVudCA9ICRwaHBjc0ZpbGUtPmZpbmRQcmV2aW91cygKICAgICAgICAgICAgICAgIFRva2Vuczo6JGVtcHR5VG9rZW5zLAogICAgICAgICAgICAgICAgKCRhcnJheUVuZCAtIDEpLAogICAgICAgICAgICAgICAgJGxhc3RJbmRleCwKICAgICAgICAgICAgICAgIHRydWUKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIGlmICgkdG9rZW5zWyR0cmFpbGluZ0NvbnRlbnRdWydjb2RlJ10gIT09IFRfQ09NTUEpIHsKICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPnJlY29yZE1ldHJpYygkc3RhY2tQdHIsICdBcnJheSBlbmQgY29tbWEnLCAnbm8nKTsKICAgICAgICAgICAgICAgICRlcnJvciA9ICdDb21tYSByZXF1aXJlZCBhZnRlciBsYXN0IHZhbHVlIGluIGFycmF5IGRlY2xhcmF0aW9uJzsKICAgICAgICAgICAgICAgICRmaXggICA9ICRwaHBjc0ZpbGUtPmFkZEZpeGFibGVFcnJvcigkZXJyb3IsICR0cmFpbGluZ0NvbnRlbnQsICdOb0NvbW1hQWZ0ZXJMYXN0Jyk7CiAgICAgICAgICAgICAgICBpZiAoJGZpeCA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5hZGRDb250ZW50KCR0cmFpbGluZ0NvbnRlbnQsICcsJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkcGhwY3NGaWxlLT5yZWNvcmRNZXRyaWMoJHN0YWNrUHRyLCAnQXJyYXkgZW5kIGNvbW1hJywgJ3llcycpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkbGFzdFZhbHVlTGluZSA9IGZhbHNlOwogICAgICAgICAgICBmb3JlYWNoICgkaW5kaWNlcyBhcyAkdmFsdWUpIHsKICAgICAgICAgICAgICAgIGlmIChlbXB0eSgkdmFsdWVbJ3ZhbHVlJ10pID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gQXJyYXkgd2FzIG1hbGZvcm1lZCBhbmQgd2UgY291bGRuJ3QgZmlndXJlIG91dAogICAgICAgICAgICAgICAgICAgIC8vIHRoZSBhcnJheSB2YWx1ZSBjb3JyZWN0bHksIHNvIHdlIGhhdmUgdG8gaWdub3JlIGl0LgogICAgICAgICAgICAgICAgICAgIC8vIE90aGVyIHBhcnRzIG9mIHRoaXMgc25pZmYgd2lsbCBjb3JyZWN0IHRoZSBlcnJvci4KICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoJGxhc3RWYWx1ZUxpbmUgIT09IGZhbHNlICYmICR0b2tlbnNbJHZhbHVlWyd2YWx1ZSddXVsnbGluZSddID09PSAkbGFzdFZhbHVlTGluZSkgewogICAgICAgICAgICAgICAgICAgICRlcnJvciA9ICdFYWNoIHZhbHVlIGluIGEgbXVsdGktbGluZSBhcnJheSBtdXN0IGJlIG9uIGEgbmV3IGxpbmUnOwogICAgICAgICAgICAgICAgICAgICRmaXggICA9ICRwaHBjc0ZpbGUtPmFkZEZpeGFibGVFcnJvcigkZXJyb3IsICR2YWx1ZVsndmFsdWUnXSwgJ1ZhbHVlTm9OZXdsaW5lJyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRmaXggPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR0b2tlbnNbKCR2YWx1ZVsndmFsdWUnXSAtIDEpXVsnY29kZSddID09PSBUX1dISVRFU1BBQ0UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5yZXBsYWNlVG9rZW4oKCR2YWx1ZVsndmFsdWUnXSAtIDEpLCAnJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5hZGROZXdsaW5lQmVmb3JlKCR2YWx1ZVsndmFsdWUnXSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkdG9rZW5zWygkdmFsdWVbJ3ZhbHVlJ10gLSAxKV1bJ2NvZGUnXSA9PT0gVF9XSElURVNQQUNFKSB7CiAgICAgICAgICAgICAgICAgICAgJGV4cGVjdGVkID0gJGtleXdvcmRTdGFydDsKCiAgICAgICAgICAgICAgICAgICAgJGZpcnN0ID0gJHBocGNzRmlsZS0+ZmluZEZpcnN0T25MaW5lKFRfV0hJVEVTUEFDRSwgJHZhbHVlWyd2YWx1ZSddLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAkZm91bmQgPSAoJHRva2Vuc1skZmlyc3RdWydjb2x1bW4nXSAtIDEpOwogICAgICAgICAgICAgICAgICAgIGlmICgkZm91bmQgIT09ICRleHBlY3RlZCkgewogICAgICAgICAgICAgICAgICAgICAgICAkZXJyb3IgPSAnQXJyYXkgdmFsdWUgbm90IGFsaWduZWQgY29ycmVjdGx5OyBleHBlY3RlZCAlcyBzcGFjZXMgYnV0IGZvdW5kICVzJzsKICAgICAgICAgICAgICAgICAgICAgICAgJGRhdGEgID0gWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGV4cGVjdGVkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZvdW5kLAogICAgICAgICAgICAgICAgICAgICAgICBdOwoKICAgICAgICAgICAgICAgICAgICAgICAgJGZpeCA9ICRwaHBjc0ZpbGUtPmFkZEZpeGFibGVFcnJvcigkZXJyb3IsICR2YWx1ZVsndmFsdWUnXSwgJ1ZhbHVlTm90QWxpZ25lZCcsICRkYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRmaXggPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZm91bmQgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGhwY3NGaWxlLT5maXhlci0+YWRkQ29udGVudCgoJHZhbHVlWyd2YWx1ZSddIC0gMSksIHN0cl9yZXBlYXQoJyAnLCAkZXhwZWN0ZWQpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBocGNzRmlsZS0+Zml4ZXItPnJlcGxhY2VUb2tlbigoJHZhbHVlWyd2YWx1ZSddIC0gMSksIHN0cl9yZXBlYXQoJyAnLCAkZXhwZWN0ZWQpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0vL2VuZCBpZgoKICAgICAgICAgICAgICAgICRsYXN0VmFsdWVMaW5lID0gJHRva2Vuc1skdmFsdWVbJ3ZhbHVlJ11dWydsaW5lJ107CiAgICAgICAgICAgIH0vL2VuZCBmb3JlYWNoCiAgICAgICAgfS8vZW5kIGlmCgogICAgICAgIC8qCiAgICAgICAgICAgIEJlbG93IHRoZSBhY3R1YWwgaW5kZW50YXRpb24gb2YgdGhlIGFycmF5IGlzIGNoZWNrZWQuCiAgICAgICAgICAgIEVycm9ycyB3aWxsIGJlIHRocm93biB3aGVuIGEga2V5IGlzIG5vdCBhbGlnbmVkLCB3aGVuCiAgICAgICAgICAgIGEgZG91YmxlIGFycm93IGlzIG5vdCBhbGlnbmVkLCBhbmQgd2hlbiBhIHZhbHVlIGlzIG5vdAogICAgICAgICAgICBhbGlnbmVkIGNvcnJlY3RseS4KICAgICAgICAgICAgSWYgYW4gZXJyb3IgaXMgZm91bmQgaW4gb25lIG9mIHRoZSBhYm92ZSBhcmVhcywgdGhlbiBlcnJvcnMKICAgICAgICAgICAgYXJlIG5vdCByZXBvcnRlZCBmb3IgdGhlIHJlc3Qgb2YgdGhlIGxpbmUgdG8gYXZvaWQgcmVwb3J0aW5nCiAgICAgICAgICAgIHNwYWNlcyBhbmQgY29sdW1ucyBpbmNvcnJlY3RseS4gT2Z0ZW4gZml4aW5nIHRoZSBmaXJzdAogICAgICAgICAgICBwcm9ibGVtIHdpbGwgZml4IHRoZSBvdGhlciAyIGFueXdheS4KCiAgICAgICAgICAgIEZvciBleGFtcGxlOgoKICAgICAgICAgICAgJGEgPSBhcnJheSgKICAgICAgICAgICAgICAgICAgJ2luZGV4JyAgPT4gJzInLAogICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICBvcgoKICAgICAgICAgICAgJGEgPSBbCiAgICAgICAgICAgICAgICAgICdpbmRleCcgID0+ICcyJywKICAgICAgICAgICAgICAgICBdOwoKICAgICAgICAgICAgSW4gdGhpcyBhcnJheSwgdGhlIGRvdWJsZSBhcnJvdyBpcyBpbmRlbnRlZCB0b28gZmFyLCBidXQgdGhpcwogICAgICAgICAgICB3aWxsIGFsc28gY2F1c2UgYW4gZXJyb3IgaW4gdGhlIHZhbHVlJ3MgYWxpZ25tZW50LiBJZiB0aGUgYXJyb3cgd2VyZQogICAgICAgICAgICB0byBiZSBtb3ZlZCBiYWNrIG9uZSBzcGFjZSBob3dldmVyLCB0aGVuIGJvdGggZXJyb3JzIHdvdWxkIGJlIGZpeGVkLgogICAgICAgICovCgogICAgICAgICRudW1WYWx1ZXMgPSBjb3VudCgkaW5kaWNlcyk7CgogICAgICAgICRpbmRpY2VzU3RhcnQgID0gKCRrZXl3b3JkU3RhcnQgKyAxKTsKICAgICAgICAkaW5kZXhMaW5lICAgICA9ICR0b2tlbnNbJHN0YWNrUHRyXVsnbGluZSddOwogICAgICAgICRsYXN0SW5kZXhMaW5lID0gbnVsbDsKICAgICAgICBmb3JlYWNoICgkaW5kaWNlcyBhcyAkaW5kZXgpIHsKICAgICAgICAgICAgaWYgKCRpbmRleFsndmFsdWUnXSA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgIC8vIFN5bnRheCBlcnJvciBvciBsaXZlIGNvZGluZy4KICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoaXNzZXQoJGluZGV4WydpbmRleCddKSA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgIC8vIEFycmF5IHZhbHVlIG9ubHkuCiAgICAgICAgICAgICAgICBpZiAoJHRva2Vuc1skaW5kZXhbJ3ZhbHVlJ11dWydsaW5lJ10gPT09ICR0b2tlbnNbJHN0YWNrUHRyXVsnbGluZSddICYmICRudW1WYWx1ZXMgPiAxKSB7CiAgICAgICAgICAgICAgICAgICAgJGVycm9yID0gJ1RoZSBmaXJzdCB2YWx1ZSBpbiBhIG11bHRpLXZhbHVlIGFycmF5IG11c3QgYmUgb24gYSBuZXcgbGluZSc7CiAgICAgICAgICAgICAgICAgICAgJGZpeCAgID0gJHBocGNzRmlsZS0+YWRkRml4YWJsZUVycm9yKCRlcnJvciwgJHN0YWNrUHRyLCAnRmlyc3RWYWx1ZU5vTmV3bGluZScpOwogICAgICAgICAgICAgICAgICAgIGlmICgkZml4ID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5hZGROZXdsaW5lQmVmb3JlKCRpbmRleFsndmFsdWUnXSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkbGFzdEluZGV4TGluZSA9ICRpbmRleExpbmU7CiAgICAgICAgICAgICRpbmRleExpbmUgICAgID0gJHRva2Vuc1skaW5kZXhbJ2luZGV4J11dWydsaW5lJ107CgogICAgICAgICAgICBpZiAoJGluZGV4TGluZSA9PT0gJHRva2Vuc1skc3RhY2tQdHJdWydsaW5lJ10pIHsKICAgICAgICAgICAgICAgICRlcnJvciA9ICdUaGUgZmlyc3QgaW5kZXggaW4gYSBtdWx0aS12YWx1ZSBhcnJheSBtdXN0IGJlIG9uIGEgbmV3IGxpbmUnOwogICAgICAgICAgICAgICAgJGZpeCAgID0gJHBocGNzRmlsZS0+YWRkRml4YWJsZUVycm9yKCRlcnJvciwgJGluZGV4WydpbmRleCddLCAnRmlyc3RJbmRleE5vTmV3bGluZScpOwogICAgICAgICAgICAgICAgaWYgKCRmaXggPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICAkcGhwY3NGaWxlLT5maXhlci0+YWRkTmV3bGluZUJlZm9yZSgkaW5kZXhbJ2luZGV4J10pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJGluZGV4TGluZSA9PT0gJGxhc3RJbmRleExpbmUpIHsKICAgICAgICAgICAgICAgICRlcnJvciA9ICdFYWNoIGluZGV4IGluIGEgbXVsdGktbGluZSBhcnJheSBtdXN0IGJlIG9uIGEgbmV3IGxpbmUnOwogICAgICAgICAgICAgICAgJGZpeCAgID0gJHBocGNzRmlsZS0+YWRkRml4YWJsZUVycm9yKCRlcnJvciwgJGluZGV4WydpbmRleCddLCAnSW5kZXhOb05ld2xpbmUnKTsKICAgICAgICAgICAgICAgIGlmICgkZml4ID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCR0b2tlbnNbKCRpbmRleFsnaW5kZXgnXSAtIDEpXVsnY29kZSddID09PSBUX1dISVRFU1BBQ0UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHBocGNzRmlsZS0+Zml4ZXItPnJlcGxhY2VUb2tlbigoJGluZGV4WydpbmRleCddIC0gMSksICcnKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5hZGROZXdsaW5lQmVmb3JlKCRpbmRleFsnaW5kZXgnXSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgkdG9rZW5zWyRpbmRleFsnaW5kZXgnXV1bJ2NvbHVtbiddICE9PSAkaW5kaWNlc1N0YXJ0CiAgICAgICAgICAgICAgICAmJiAoJGluZGV4WydpbmRleCddIC0gMSkgIT09ICRhcnJheVN0YXJ0CiAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgJGV4cGVjdGVkID0gKCRpbmRpY2VzU3RhcnQgLSAxKTsKICAgICAgICAgICAgICAgICRmb3VuZCAgICA9ICgkdG9rZW5zWyRpbmRleFsnaW5kZXgnXV1bJ2NvbHVtbiddIC0gMSk7CiAgICAgICAgICAgICAgICAkZXJyb3IgICAgPSAnQXJyYXkga2V5IG5vdCBhbGlnbmVkIGNvcnJlY3RseTsgZXhwZWN0ZWQgJXMgc3BhY2VzIGJ1dCBmb3VuZCAlcyc7CiAgICAgICAgICAgICAgICAkZGF0YSAgICAgPSBbCiAgICAgICAgICAgICAgICAgICAgJGV4cGVjdGVkLAogICAgICAgICAgICAgICAgICAgICRmb3VuZCwKICAgICAgICAgICAgICAgIF07CgogICAgICAgICAgICAgICAgJGZpeCA9ICRwaHBjc0ZpbGUtPmFkZEZpeGFibGVFcnJvcigkZXJyb3IsICRpbmRleFsnaW5kZXgnXSwgJ0tleU5vdEFsaWduZWQnLCAkZGF0YSk7CiAgICAgICAgICAgICAgICBpZiAoJGZpeCA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgIGlmICgkZm91bmQgPT09IDAgfHwgJHRva2Vuc1soJGluZGV4WydpbmRleCddIC0gMSldWydjb2RlJ10gIT09IFRfV0hJVEVTUEFDRSkgewogICAgICAgICAgICAgICAgICAgICAgICAkcGhwY3NGaWxlLT5maXhlci0+YWRkQ29udGVudCgoJGluZGV4WydpbmRleCddIC0gMSksIHN0cl9yZXBlYXQoJyAnLCAkZXhwZWN0ZWQpKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkcGhwY3NGaWxlLT5maXhlci0+cmVwbGFjZVRva2VuKCgkaW5kZXhbJ2luZGV4J10gLSAxKSwgc3RyX3JlcGVhdCgnICcsICRleHBlY3RlZCkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGFycm93U3RhcnQgPSAoJHRva2Vuc1skaW5kZXhbJ2luZGV4J11dWydjb2x1bW4nXSArICRtYXhMZW5ndGggKyAxKTsKICAgICAgICAgICAgaWYgKCR0b2tlbnNbJGluZGV4WydhcnJvdyddXVsnY29sdW1uJ10gIT09ICRhcnJvd1N0YXJ0KSB7CiAgICAgICAgICAgICAgICAkZXhwZWN0ZWQgPSAoJGFycm93U3RhcnQgLSAoJGluZGV4WydpbmRleF9sZW5ndGgnXSArICR0b2tlbnNbJGluZGV4WydpbmRleCddXVsnY29sdW1uJ10pKTsKICAgICAgICAgICAgICAgICRmb3VuZCAgICA9ICgkdG9rZW5zWyRpbmRleFsnYXJyb3cnXV1bJ2NvbHVtbiddIC0gKCRpbmRleFsnaW5kZXhfbGVuZ3RoJ10gKyAkdG9rZW5zWyRpbmRleFsnaW5kZXgnXV1bJ2NvbHVtbiddKSk7CiAgICAgICAgICAgICAgICAkZXJyb3IgICAgPSAnQXJyYXkgZG91YmxlIGFycm93IG5vdCBhbGlnbmVkIGNvcnJlY3RseTsgZXhwZWN0ZWQgJXMgc3BhY2UocykgYnV0IGZvdW5kICVzJzsKICAgICAgICAgICAgICAgICRkYXRhICAgICA9IFsKICAgICAgICAgICAgICAgICAgICAkZXhwZWN0ZWQsCiAgICAgICAgICAgICAgICAgICAgJGZvdW5kLAogICAgICAgICAgICAgICAgXTsKCiAgICAgICAgICAgICAgICAkZml4ID0gJHBocGNzRmlsZS0+YWRkRml4YWJsZUVycm9yKCRlcnJvciwgJGluZGV4WydhcnJvdyddLCAnRG91YmxlQXJyb3dOb3RBbGlnbmVkJywgJGRhdGEpOwogICAgICAgICAgICAgICAgaWYgKCRmaXggPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoJGZvdW5kID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5hZGRDb250ZW50KCgkaW5kZXhbJ2Fycm93J10gLSAxKSwgc3RyX3JlcGVhdCgnICcsICRleHBlY3RlZCkpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5yZXBsYWNlVG9rZW4oKCRpbmRleFsnYXJyb3cnXSAtIDEpLCBzdHJfcmVwZWF0KCcgJywgJGV4cGVjdGVkKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkdmFsdWVTdGFydCA9ICgkYXJyb3dTdGFydCArIDMpOwogICAgICAgICAgICBpZiAoJHRva2Vuc1skaW5kZXhbJ3ZhbHVlJ11dWydjb2x1bW4nXSAhPT0gJHZhbHVlU3RhcnQpIHsKICAgICAgICAgICAgICAgICRleHBlY3RlZCA9ICgkdmFsdWVTdGFydCAtICgkdG9rZW5zWyRpbmRleFsnYXJyb3cnXV1bJ2xlbmd0aCddICsgJHRva2Vuc1skaW5kZXhbJ2Fycm93J11dWydjb2x1bW4nXSkpOwogICAgICAgICAgICAgICAgJGZvdW5kICAgID0gKCR0b2tlbnNbJGluZGV4Wyd2YWx1ZSddXVsnY29sdW1uJ10gLSAoJHRva2Vuc1skaW5kZXhbJ2Fycm93J11dWydsZW5ndGgnXSArICR0b2tlbnNbJGluZGV4WydhcnJvdyddXVsnY29sdW1uJ10pKTsKICAgICAgICAgICAgICAgIGlmICgkZm91bmQgPCAwKSB7CiAgICAgICAgICAgICAgICAgICAgJGZvdW5kID0gJ25ld2xpbmUnOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRlcnJvciA9ICdBcnJheSB2YWx1ZSBub3QgYWxpZ25lZCBjb3JyZWN0bHk7IGV4cGVjdGVkICVzIHNwYWNlKHMpIGJ1dCBmb3VuZCAlcyc7CiAgICAgICAgICAgICAgICAkZGF0YSAgPSBbCiAgICAgICAgICAgICAgICAgICAgJGV4cGVjdGVkLAogICAgICAgICAgICAgICAgICAgICRmb3VuZCwKICAgICAgICAgICAgICAgIF07CgogICAgICAgICAgICAgICAgJGZpeCA9ICRwaHBjc0ZpbGUtPmFkZEZpeGFibGVFcnJvcigkZXJyb3IsICRpbmRleFsnYXJyb3cnXSwgJ1ZhbHVlTm90QWxpZ25lZCcsICRkYXRhKTsKICAgICAgICAgICAgICAgIGlmICgkZml4ID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRmb3VuZCA9PT0gJ25ld2xpbmUnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRwcmV2ID0gJHBocGNzRmlsZS0+ZmluZFByZXZpb3VzKFRfV0hJVEVTUEFDRSwgKCRpbmRleFsndmFsdWUnXSAtIDEpLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgJHBocGNzRmlsZS0+Zml4ZXItPmJlZ2luQ2hhbmdlc2V0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoJGkgPSAoJHByZXYgKyAxKTsgJGkgPCAkaW5kZXhbJ3ZhbHVlJ107ICRpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5yZXBsYWNlVG9rZW4oJGksICcnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgJHBocGNzRmlsZS0+Zml4ZXItPnJlcGxhY2VUb2tlbigoJGluZGV4Wyd2YWx1ZSddIC0gMSksIHN0cl9yZXBlYXQoJyAnLCAkZXhwZWN0ZWQpKTsKICAgICAgICAgICAgICAgICAgICAgICAgJHBocGNzRmlsZS0+Zml4ZXItPmVuZENoYW5nZXNldCgpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJGZvdW5kID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5hZGRDb250ZW50KCgkaW5kZXhbJ3ZhbHVlJ10gLSAxKSwgc3RyX3JlcGVhdCgnICcsICRleHBlY3RlZCkpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5yZXBsYWNlVG9rZW4oKCRpbmRleFsndmFsdWUnXSAtIDEpLCBzdHJfcmVwZWF0KCcgJywgJGV4cGVjdGVkKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9Ly9lbmQgaWYKCiAgICAgICAgICAgIC8vIENoZWNrIGVhY2ggbGluZSBlbmRzIGluIGEgY29tbWEuCiAgICAgICAgICAgICR2YWx1ZVN0YXJ0ID0gJGluZGV4Wyd2YWx1ZSddOwogICAgICAgICAgICAkdmFsdWVMaW5lICA9ICR0b2tlbnNbJGluZGV4Wyd2YWx1ZSddXVsnbGluZSddOwogICAgICAgICAgICAkbmV4dENvbW1hICA9IGZhbHNlOwoKICAgICAgICAgICAgJGVuZCA9ICRwaHBjc0ZpbGUtPmZpbmRFbmRPZlN0YXRlbWVudCgkdmFsdWVTdGFydCk7CiAgICAgICAgICAgIGlmICgkZW5kID09PSBmYWxzZSkgewogICAgICAgICAgICAgICAgJHZhbHVlRW5kID0gJHZhbHVlU3RhcnQ7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoJHRva2Vuc1skZW5kXVsnY29kZSddID09PSBUX0NPTU1BKSB7CiAgICAgICAgICAgICAgICAkdmFsdWVFbmQgID0gJHBocGNzRmlsZS0+ZmluZFByZXZpb3VzKFRva2Vuczo6JGVtcHR5VG9rZW5zLCAoJGVuZCAtIDEpLCAkdmFsdWVTdGFydCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAkbmV4dENvbW1hID0gJGVuZDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICR2YWx1ZUVuZCA9ICRlbmQ7CiAgICAgICAgICAgICAgICAkbmV4dCAgICAgPSAkcGhwY3NGaWxlLT5maW5kTmV4dChUb2tlbnM6OiRlbXB0eVRva2VucywgKCRlbmQgKyAxKSwgJGFycmF5RW5kLCB0cnVlKTsKICAgICAgICAgICAgICAgIGlmICgkbmV4dCAhPT0gZmFsc2UgJiYgJHRva2Vuc1skbmV4dF1bJ2NvZGUnXSA9PT0gVF9DT01NQSkgewogICAgICAgICAgICAgICAgICAgICRuZXh0Q29tbWEgPSAkbmV4dDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgJHZhbHVlTGluZSA9ICR0b2tlbnNbJHZhbHVlRW5kXVsnbGluZSddOwogICAgICAgICAgICBpZiAoJHRva2Vuc1skdmFsdWVFbmRdWydjb2RlJ10gPT09IFRfRU5EX0hFUkVET0MgfHwgJHRva2Vuc1skdmFsdWVFbmRdWydjb2RlJ10gPT09IFRfRU5EX05PV0RPQykgewogICAgICAgICAgICAgICAgJHZhbHVlTGluZSsrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJG5leHRDb21tYSA9PT0gZmFsc2UgfHwgKCR0b2tlbnNbJG5leHRDb21tYV1bJ2xpbmUnXSAhPT0gJHZhbHVlTGluZSkpIHsKICAgICAgICAgICAgICAgICRlcnJvciA9ICdFYWNoIGxpbmUgaW4gYW4gYXJyYXkgZGVjbGFyYXRpb24gbXVzdCBlbmQgaW4gYSBjb21tYSc7CiAgICAgICAgICAgICAgICAkZml4ICAgPSAkcGhwY3NGaWxlLT5hZGRGaXhhYmxlRXJyb3IoJGVycm9yLCAkaW5kZXhbJ3ZhbHVlJ10sICdOb0NvbW1hJyk7CgogICAgICAgICAgICAgICAgaWYgKCRmaXggPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBlbmQgb2YgdGhlIGxpbmUgYW5kIHB1dCBhIGNvbW1hIHRoZXJlLgogICAgICAgICAgICAgICAgICAgIGZvciAoJGkgPSAoJGluZGV4Wyd2YWx1ZSddICsgMSk7ICRpIDw9ICRhcnJheUVuZDsgJGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHRva2Vuc1skaV1bJ2xpbmUnXSA+ICR2YWx1ZUxpbmUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAkcGhwY3NGaWxlLT5maXhlci0+YmVnaW5DaGFuZ2VzZXQoKTsKICAgICAgICAgICAgICAgICAgICAkcGhwY3NGaWxlLT5maXhlci0+YWRkQ29udGVudEJlZm9yZSgoJGkgLSAxKSwgJywnKTsKICAgICAgICAgICAgICAgICAgICBpZiAoJG5leHRDb21tYSAhPT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHBocGNzRmlsZS0+Zml4ZXItPnJlcGxhY2VUb2tlbigkbmV4dENvbW1hLCAnJyk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAkcGhwY3NGaWxlLT5maXhlci0+ZW5kQ2hhbmdlc2V0KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0vL2VuZCBpZgoKICAgICAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGVyZSBpcyBubyBzcGFjZSBiZWZvcmUgdGhlIGNvbW1hLgogICAgICAgICAgICBpZiAoJG5leHRDb21tYSAhPT0gZmFsc2UgJiYgJHRva2Vuc1soJG5leHRDb21tYSAtIDEpXVsnY29kZSddID09PSBUX1dISVRFU1BBQ0UpIHsKICAgICAgICAgICAgICAgIC8vIEhlcmUvbm93ZG9jIGNsb3NpbmcgdGFncyBtdXN0IGhhdmUgdGhlIGNvbW1hIG9uIHRoZSBuZXh0IGxpbmUuCiAgICAgICAgICAgICAgICAkcHJldiA9ICRwaHBjc0ZpbGUtPmZpbmRQcmV2aW91cyhUb2tlbnM6OiRlbXB0eVRva2VucywgKCRuZXh0Q29tbWEgLSAxKSwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICBpZiAoJHRva2Vuc1skcHJldl1bJ2NvZGUnXSAhPT0gVF9FTkRfSEVSRURPQyAmJiAkdG9rZW5zWyRwcmV2XVsnY29kZSddICE9PSBUX0VORF9OT1dET0MpIHsKICAgICAgICAgICAgICAgICAgICAkY29udGVudCAgICAgPSAkdG9rZW5zWygkbmV4dENvbW1hIC0gMildWydjb250ZW50J107CiAgICAgICAgICAgICAgICAgICAgJHNwYWNlTGVuZ3RoID0gJHRva2Vuc1soJG5leHRDb21tYSAtIDEpXVsnbGVuZ3RoJ107CiAgICAgICAgICAgICAgICAgICAgJGVycm9yICAgICAgID0gJ0V4cGVjdGVkIDAgc3BhY2VzIGJldHdlZW4gIiVzIiBhbmQgY29tbWE7ICVzIGZvdW5kJzsKICAgICAgICAgICAgICAgICAgICAkZGF0YSAgICAgICAgPSBbCiAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZW50LAogICAgICAgICAgICAgICAgICAgICAgICAkc3BhY2VMZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgXTsKCiAgICAgICAgICAgICAgICAgICAgJGZpeCA9ICRwaHBjc0ZpbGUtPmFkZEZpeGFibGVFcnJvcigkZXJyb3IsICRuZXh0Q29tbWEsICdTcGFjZUJlZm9yZUNvbW1hJywgJGRhdGEpOwogICAgICAgICAgICAgICAgICAgIGlmICgkZml4ID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRwaHBjc0ZpbGUtPmZpeGVyLT5yZXBsYWNlVG9rZW4oKCRuZXh0Q29tbWEgLSAxKSwgJycpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0vL2VuZCBmb3JlYWNoCgogICAgfS8vZW5kIHByb2Nlc3NNdWx0aUxpbmVBcnJheSgpCgoKfS8vZW5kIGNsYXNzCiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjE6e3M6NDY6IlxQSFBfQ29kZVNuaWZmZXJcU3RhbmRhcmRzXFNxdWl6XFNuaWZmc1xBcnJheXMiO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo0NjoiXFBIUF9Db2RlU25pZmZlclxTdGFuZGFyZHNcU3F1aXpcU25pZmZzXEFycmF5cyI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjY6IkFycmF5cyI7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YToxOntzOjY4OiJcUEhQX0NvZGVTbmlmZmVyXFN0YW5kYXJkc1xTcXVpelxTbmlmZnNcQXJyYXlzXEFycmF5RGVjbGFyYXRpb25TbmlmZiI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18iOjExOntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2ODoiXFBIUF9Db2RlU25pZmZlclxTdGFuZGFyZHNcU3F1aXpcU25pZmZzXEFycmF5c1xBcnJheURlY2xhcmF0aW9uU25pZmYiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoyMToiQXJyYXlEZWNsYXJhdGlvblNuaWZmIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGRvY0Jsb2NrIjtOO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBwYXJlbnQiO047czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGltcGxlbWVudHMiO2E6MTp7czoyOToiXFBIUF9Db2RlU25pZmZlclxTbmlmZnNcU25pZmYiO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czoyOToiXFBIUF9Db2RlU25pZmZlclxTbmlmZnNcU25pZmYiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czo1OiJTbmlmZiI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AY29uc3RhbnRzIjthOjA6e31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AcHJvcGVydGllcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAG1ldGhvZHMiO2E6NDp7czo4MDoiXFBIUF9Db2RlU25pZmZlclxTdGFuZGFyZHNcU3F1aXpcU25pZmZzXEFycmF5c1xBcnJheURlY2xhcmF0aW9uU25pZmY6OnJlZ2lzdGVyKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jayI6Nzp7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBzdW1tYXJ5IjtzOjU3OiJSZXR1cm5zIGFuIGFycmF5IG9mIHRva2VucyB0aGlzIHRlc3Qgd2FudHMgdG8gbGlzdGVuIGZvci4iO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MDoiIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX1zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHRhZ3MiO2E6MTp7aTowO086NDY6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFJldHVybl8iOjM6e3M6NzoiACoAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFycmF5XyI6Mzp7czoxMjoiACoAdmFsdWVUeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czoxMDoiACoAa2V5VHlwZSI7TjtzOjE3OiIAKgBkZWZhdWx0S2V5VHlwZSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kIjoxOntzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kAHR5cGVzIjthOjI6e2k6MDtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcU3RyaW5nXyI6MDp7fWk6MTtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcSW50ZWdlciI6MDp7fX19fXM6NzoiACoAbmFtZSI7czo2OiJyZXR1cm4iO3M6MTQ6IgAqAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319fX1zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0IjoyOntzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlIjtzOjQ1OiJQSFBfQ29kZVNuaWZmZXJcU3RhbmRhcmRzXFNxdWl6XFNuaWZmc1xBcnJheXMiO3M6NTY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dABuYW1lc3BhY2VBbGlhc2VzIjthOjM6e3M6NDoiRmlsZSI7czoyNjoiUEhQX0NvZGVTbmlmZmVyXEZpbGVzXEZpbGUiO3M6NToiU25pZmYiO3M6Mjg6IlBIUF9Db2RlU25pZmZlclxTbmlmZnNcU25pZmYiO3M6NjoiVG9rZW5zIjtzOjI3OiJQSFBfQ29kZVNuaWZmZXJcVXRpbFxUb2tlbnMiO319czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlU3RhcnQiO2I6MDtzOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVFbmQiO2I6MDt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6ODA6IlxQSFBfQ29kZVNuaWZmZXJcU3RhbmRhcmRzXFNxdWl6XFNuaWZmc1xBcnJheXNcQXJyYXlEZWNsYXJhdGlvblNuaWZmOjpyZWdpc3RlcigpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6ODoicmVnaXN0ZXIiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjU7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo3OToiXFBIUF9Db2RlU25pZmZlclxTdGFuZGFyZHNcU3F1aXpcU25pZmZzXEFycmF5c1xBcnJheURlY2xhcmF0aW9uU25pZmY6OnByb2Nlc3MoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6NjA6IlByb2Nlc3NlcyB0aGlzIHNuaWZmLCB3aGVuIG9uZSBvZiBpdHMgdG9rZW5zIGlzIGVuY291bnRlcmVkLiI7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czowOiIiO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAdGFncyI7YTozOntpOjA7Tzo0NDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUGFyYW0iOjU6e3M6NTg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xQYXJhbQB2YXJpYWJsZU5hbWUiO3M6OToicGhwY3NGaWxlIjtzOjU2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUGFyYW0AaXNWYXJpYWRpYyI7YjowO3M6NzoiACoAdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8iOjE6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjI3OiJcUEhQX0NvZGVTbmlmZmVyXEZpbGVzXEZpbGUiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czo0OiJGaWxlIjt9fXM6NzoiACoAbmFtZSI7czo1OiJwYXJhbSI7czoxNDoiACoAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MzE6IlRoZSBjdXJyZW50IGZpbGUgYmVpbmcgY2hlY2tlZC4iO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fX1pOjE7Tzo0NDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUGFyYW0iOjU6e3M6NTg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xQYXJhbQB2YXJpYWJsZU5hbWUiO3M6ODoic3RhY2tQdHIiO3M6NTY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xQYXJhbQBpc1ZhcmlhZGljIjtiOjA7czo3OiIAKgB0eXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcSW50ZWdlciI6MDp7fXM6NzoiACoAbmFtZSI7czo1OiJwYXJhbSI7czoxNDoiACoAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6NjU6IlRoZSBwb3NpdGlvbiBvZiB0aGUgY3VycmVudCB0b2tlbiBpbgp0aGUgc3RhY2sgcGFzc2VkIGluICR0b2tlbnMuIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX19aToyO086NDY6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFJldHVybl8iOjM6e3M6NzoiACoAdHlwZSI7TzozNjoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFZvaWRfIjowOnt9czo3OiIAKgBuYW1lIjtzOjY6InJldHVybiI7czoxNDoiACoAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MDoiIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX19fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAY29udGV4dCI7cjo3NztzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTozNTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo3OToiXFBIUF9Db2RlU25pZmZlclxTdGFuZGFyZHNcU3F1aXpcU25pZmZzXEFycmF5c1xBcnJheURlY2xhcmF0aW9uU25pZmY6OnByb2Nlc3MoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjc6InByb2Nlc3MiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6Mjp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6OToicGhwY3NGaWxlIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XyI6MTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6Mjc6IlxQSFBfQ29kZVNuaWZmZXJcRmlsZXNcRmlsZSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjQ6IkZpbGUiO319czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9aToxO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6ODoic3RhY2tQdHIiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo0NDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjk0OiJcUEhQX0NvZGVTbmlmZmVyXFN0YW5kYXJkc1xTcXVpelxTbmlmZnNcQXJyYXlzXEFycmF5RGVjbGFyYXRpb25TbmlmZjo6cHJvY2Vzc1NpbmdsZUxpbmVBcnJheSgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2siOjc6e3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAc3VtbWFyeSI7czo0MToiUHJvY2Vzc2VzIGEgc2luZ2xlLWxpbmUgYXJyYXkgZGVmaW5pdGlvbi4iO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MDoiIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX1zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHRhZ3MiO2E6NTp7aTowO086NDQ6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFBhcmFtIjo1OntzOjU4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUGFyYW0AdmFyaWFibGVOYW1lIjtzOjk6InBocGNzRmlsZSI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFBhcmFtAGlzVmFyaWFkaWMiO2I6MDtzOjc6IgAqAHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfIjoxOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czoyNzoiXFBIUF9Db2RlU25pZmZlclxGaWxlc1xGaWxlIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6NDoiRmlsZSI7fX1zOjc6IgAqAG5hbWUiO3M6NToicGFyYW0iO3M6MTQ6IgAqAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjMxOiJUaGUgY3VycmVudCBmaWxlIGJlaW5nIGNoZWNrZWQuIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX19aToxO086NDQ6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFBhcmFtIjo1OntzOjU4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUGFyYW0AdmFyaWFibGVOYW1lIjtzOjg6InN0YWNrUHRyIjtzOjU2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUGFyYW0AaXNWYXJpYWRpYyI7YjowO3M6NzoiACoAdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEludGVnZXIiOjA6e31zOjc6IgAqAG5hbWUiO3M6NToicGFyYW0iO3M6MTQ6IgAqAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjY1OiJUaGUgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgdG9rZW4KaW4gdGhlIHN0YWNrIHBhc3NlZCBpbiAkdG9rZW5zLiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319fWk6MjtPOjQ0OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xQYXJhbSI6NTp7czo1ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFBhcmFtAHZhcmlhYmxlTmFtZSI7czoxMDoiYXJyYXlTdGFydCI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFBhcmFtAGlzVmFyaWFkaWMiO2I6MDtzOjc6IgAqAHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xJbnRlZ2VyIjowOnt9czo3OiIAKgBuYW1lIjtzOjU6InBhcmFtIjtzOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czo0MzoiVGhlIHRva2VuIHRoYXQgc3RhcnRzIHRoZSBhcnJheSBkZWZpbml0aW9uLiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319fWk6MztPOjQ0OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xQYXJhbSI6NTp7czo1ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFBhcmFtAHZhcmlhYmxlTmFtZSI7czo4OiJhcnJheUVuZCI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFBhcmFtAGlzVmFyaWFkaWMiO2I6MDtzOjc6IgAqAHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xJbnRlZ2VyIjowOnt9czo3OiIAKgBuYW1lIjtzOjU6InBhcmFtIjtzOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czo0MToiVGhlIHRva2VuIHRoYXQgZW5kcyB0aGUgYXJyYXkgZGVmaW5pdGlvbi4iO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fX1pOjQ7Tzo0NjoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUmV0dXJuXyI6Mzp7czo3OiIAKgB0eXBlIjtPOjM2OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcVm9pZF8iOjA6e31zOjc6IgAqAG5hbWUiO3M6NjoicmV0dXJuIjtzOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czowOiIiO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fX19czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBjb250ZXh0IjtyOjc3O3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjEzMztzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo5NDoiXFBIUF9Db2RlU25pZmZlclxTdGFuZGFyZHNcU3F1aXpcU25pZmZzXEFycmF5c1xBcnJheURlY2xhcmF0aW9uU25pZmY6OnByb2Nlc3NTaW5nbGVMaW5lQXJyYXkoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjIyOiJwcm9jZXNzU2luZ2xlTGluZUFycmF5Ijt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo2OiJwdWJsaWMiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjQ6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjk6InBocGNzRmlsZSI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fWk6MTtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjg6InN0YWNrUHRyIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9aToyO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6MTA6ImFycmF5U3RhcnQiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjM7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo4OiJhcnJheUVuZCI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjE0NDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjkzOiJcUEhQX0NvZGVTbmlmZmVyXFN0YW5kYXJkc1xTcXVpelxTbmlmZnNcQXJyYXlzXEFycmF5RGVjbGFyYXRpb25TbmlmZjo6cHJvY2Vzc011bHRpTGluZUFycmF5KCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jayI6Nzp7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBzdW1tYXJ5IjtzOjQwOiJQcm9jZXNzZXMgYSBtdWx0aS1saW5lIGFycmF5IGRlZmluaXRpb24uIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjU6e2k6MDtPOjQ0OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xQYXJhbSI6NTp7czo1ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFBhcmFtAHZhcmlhYmxlTmFtZSI7czo5OiJwaHBjc0ZpbGUiO3M6NTY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xQYXJhbQBpc1ZhcmlhZGljIjtiOjA7czo3OiIAKgB0eXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XyI6MTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6Mjc6IlxQSFBfQ29kZVNuaWZmZXJcRmlsZXNcRmlsZSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjQ6IkZpbGUiO319czo3OiIAKgBuYW1lIjtzOjU6InBhcmFtIjtzOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czozMToiVGhlIGN1cnJlbnQgZmlsZSBiZWluZyBjaGVja2VkLiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319fWk6MTtPOjQ0OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xQYXJhbSI6NTp7czo1ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFBhcmFtAHZhcmlhYmxlTmFtZSI7czo4OiJzdGFja1B0ciI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFBhcmFtAGlzVmFyaWFkaWMiO2I6MDtzOjc6IgAqAHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xJbnRlZ2VyIjowOnt9czo3OiIAKgBuYW1lIjtzOjU6InBhcmFtIjtzOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czo2NToiVGhlIHBvc2l0aW9uIG9mIHRoZSBjdXJyZW50IHRva2VuCmluIHRoZSBzdGFjayBwYXNzZWQgaW4gJHRva2Vucy4iO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fX1pOjI7Tzo0NDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUGFyYW0iOjU6e3M6NTg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xQYXJhbQB2YXJpYWJsZU5hbWUiO3M6MTA6ImFycmF5U3RhcnQiO3M6NTY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xQYXJhbQBpc1ZhcmlhZGljIjtiOjA7czo3OiIAKgB0eXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcSW50ZWdlciI6MDp7fXM6NzoiACoAbmFtZSI7czo1OiJwYXJhbSI7czoxNDoiACoAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6NDM6IlRoZSB0b2tlbiB0aGF0IHN0YXJ0cyB0aGUgYXJyYXkgZGVmaW5pdGlvbi4iO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fX1pOjM7Tzo0NDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUGFyYW0iOjU6e3M6NTg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xQYXJhbQB2YXJpYWJsZU5hbWUiO3M6ODoiYXJyYXlFbmQiO3M6NTY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xQYXJhbQBpc1ZhcmlhZGljIjtiOjA7czo3OiIAKgB0eXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcSW50ZWdlciI6MDp7fXM6NzoiACoAbmFtZSI7czo1OiJwYXJhbSI7czoxNDoiACoAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6NDE6IlRoZSB0b2tlbiB0aGF0IGVuZHMgdGhlIGFycmF5IGRlZmluaXRpb24uIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX19aTo0O086NDY6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFJldHVybl8iOjM6e3M6NzoiACoAdHlwZSI7TzozNjoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFZvaWRfIjowOnt9czo3OiIAKgBuYW1lIjtzOjY6InJldHVybiI7czoxNDoiACoAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MDoiIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX19fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAY29udGV4dCI7cjo3NztzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTozMDE7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlU3RhcnQiO2I6MDtzOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVFbmQiO2I6MDt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6OTM6IlxQSFBfQ29kZVNuaWZmZXJcU3RhbmRhcmRzXFNxdWl6XFNuaWZmc1xBcnJheXNcQXJyYXlEZWNsYXJhdGlvblNuaWZmOjpwcm9jZXNzTXVsdGlMaW5lQXJyYXkoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjIxOiJwcm9jZXNzTXVsdGlMaW5lQXJyYXkiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6NDp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6OToicGhwY3NGaWxlIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9aToxO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6ODoic3RhY2tQdHIiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czoxMDoiYXJyYXlTdGFydCI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fWk6MztPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjg6ImFycmF5RW5kIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MzEyO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fX1zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AdXNlZFRyYWl0cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxNjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO319fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fX0=";